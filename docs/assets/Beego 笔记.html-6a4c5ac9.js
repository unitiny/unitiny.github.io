import{_ as p,W as o,X as i,Y as n,Z as s,a0 as t,a2 as e,C as c}from"./framework-5d92cd28.js";const l={},u=n("h2",{id:"使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用","aria-hidden":"true"},"#"),s(" 使用")],-1),r={href:"https://beego.me/",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>go mod init   #初始化
bee new demo  #创建
bee run  	  #运行
http://localhost:8080/  #访问网址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k={href:"https://www.bilibili.com/video/BV1hv411z7LA?p=3&spm_id_from=pageDriver",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.imooc.com/video/20266",target:"_blank",rel:"noopener noreferrer"},m=e(`<h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h3 id="controller层" tabindex="-1"><a class="header-anchor" href="#controller层" aria-hidden="true">#</a> Controller层</h3><h4 id="返回json数据-u为结构体" tabindex="-1"><a class="header-anchor" href="#返回json数据-u为结构体" aria-hidden="true">#</a> 返回json数据 u为结构体</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 返回json数据  u为结构体</span>
c<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span>u
c<span class="token punctuation">.</span><span class="token function">ServeJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义结构体对应表单数据获取" tabindex="-1"><a class="header-anchor" href="#定义结构体对应表单数据获取" aria-hidden="true">#</a> 定义结构体对应表单数据获取</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 结构体名称大写 和form的name不符，故要转化</span>
<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Username <span class="token builtin">string</span>   <span class="token string">\`form:&quot;username&quot;\`</span>
	Password <span class="token builtin">string</span>   <span class="token string">\`form:&quot;password&quot;\`</span>
	Hobby    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">\`form:&quot;hobby&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token comment">// 解析表单数据</span>
c<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="接收xml数据并转化为json" tabindex="-1"><a class="header-anchor" href="#接收xml数据并转化为json" aria-hidden="true">#</a> 接收xml数据并转化为json</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Product <span class="token keyword">struct</span> <span class="token punctuation">{</span>  <span class="token comment">// 记得数据格式映射</span>
	Title   <span class="token builtin">string</span> <span class="token string">\`form:&quot;title&quot; xml:&quot;title&quot;\`</span>
	Content <span class="token builtin">string</span> <span class="token string">\`form:&quot;content&quot; xml:&quot;content&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token comment">// 接收post传来的xml数据,需要更改配置copyrequestbody = true，再重启项目</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GoodsController<span class="token punctuation">)</span> <span class="token function">GetXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	p <span class="token operator">:=</span> Product<span class="token punctuation">{</span><span class="token punctuation">}</span>
	str <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span>Input<span class="token punctuation">.</span>RequestBody<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
	<span class="token comment">//c.Ctx.WriteString(str)</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	<span class="token keyword">if</span> e <span class="token operator">:=</span> xml<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span>Input<span class="token punctuation">.</span>RequestBody<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">ServeJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span>Data<span class="token punctuation">[</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> p
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span><span class="token function">ServeJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取和设置app-conf配置信息" tabindex="-1"><a class="header-anchor" href="#获取和设置app-conf配置信息" aria-hidden="true">#</a> 获取和设置app.conf配置信息</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mysqlUser<span class="token operator">:=</span>beego<span class="token punctuation">.</span>AppConfig<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;mysqluser&quot;</span><span class="token punctuation">)</span>
beego<span class="token punctuation">.</span>AppConfig<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;redisuser&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cookie操作" tabindex="-1"><a class="header-anchor" href="#cookie操作" aria-hidden="true">#</a> cookie操作</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 设置和获取cookie</span>
<span class="token comment">// key,val,exist_time,allow_web ;默认存在3600秒，不设置时间关闭浏览器后cookie消失</span>
c<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">&quot;/goods/cookie&quot;</span><span class="token punctuation">)</span>
username<span class="token operator">:=</span>c<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span><span class="token function">GetCookie</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 设置加密和中文cookie</span>
c<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span><span class="token function">SetSecureCookie</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;中文密码&quot;</span><span class="token punctuation">)</span>
password<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>c<span class="token punctuation">.</span>Ctx<span class="token punctuation">.</span><span class="token function">GetSecureCookie</span><span class="token punctuation">(</span><span class="token string">&quot;111111&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 设置和获取session，需要在conf配置sessionon = true，同时也有cookie的secure安全模式的session</span>
c<span class="token punctuation">.</span><span class="token function">SetSession</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1235464&quot;</span><span class="token punctuation">)</span>
phone<span class="token operator">:=</span>c<span class="token punctuation">.</span><span class="token function">GetSession</span><span class="token punctuation">(</span><span class="token string">&quot;phone&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解析表单数据并更新数据库" tabindex="-1"><a class="header-anchor" href="#解析表单数据并更新数据库" aria-hidden="true">#</a> 解析表单数据并更新数据库</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> m models<span class="token punctuation">.</span>MenuModel
<span class="token keyword">if</span> err<span class="token operator">:=</span>c<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">==</span><span class="token boolean">nil</span><span class="token punctuation">{</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> orm<span class="token punctuation">.</span><span class="token function">NewOrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解析字符串为json格式" tabindex="-1"><a class="header-anchor" href="#解析字符串为json格式" aria-hidden="true">#</a> 解析字符串为json格式</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>AuthStr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>authArr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="接收前端json数据" tabindex="-1"><a class="header-anchor" href="#接收前端json数据" aria-hidden="true">#</a> 接收前端json数据</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 前端要求
let data={&quot;userId&quot;:userId,&quot;name&quot;: this.name, &quot;nameIntroduce&quot;:this.introduce}
data=JSON.stringify(data)

// 后端
target:=models.TargetModel{}
data:=c.Ctx.Input.RequestBody
if err:=json.Unmarshal(data,&amp;target);err!=nil{
    fmt.Println(&quot;json解析错误&quot;)
}
fmt.Println(data,target)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="view层" tabindex="-1"><a class="header-anchor" href="#view层" aria-hidden="true">#</a> View层</h3><p>循环输出字符串切片和map数据</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{range $key,$val := .stu}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{$key}}----{{$val}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> 
    {{end}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断" aria-hidden="true">#</a> 条件判断</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{if .isLogin}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>isLogin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> {{else}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>unIsLogin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> {{end}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="大小判断" tabindex="-1"><a class="header-anchor" href="#大小判断" aria-hidden="true">#</a> 大小判断</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// eq / ne / lt / le / gt / ge  
// 等于 、 不等  、小于（less than）、小于等于、大于（greater than）、大于等于
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{if gt .num.Num1 .num.Num2}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>num1大于num2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> 
    {{else}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>num1小于或等于num2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> 
    {{end}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="自定义模板-不要漏template的" tabindex="-1"><a class="header-anchor" href="#自定义模板-不要漏template的" aria-hidden="true">#</a> 自定义模板 不要漏template的.</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    {{define &quot;aaa&quot;}}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>自定义模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> {{end}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{template &quot;aaa&quot; .}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="引入文件" tabindex="-1"><a class="header-anchor" href="#引入文件" aria-hidden="true">#</a> 引入文件</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>// 引入模板 尾部空格加点可以在模板中使用变量
{{template &quot;/public/header.html&quot; .}}

// 引入css 、js
{{assets_css &quot;/static/css/user.css&quot;}}
{{assets_js &quot;/static/js/user.js&quot;}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出时间、字符串截取、解析html" tabindex="-1"><a class="header-anchor" href="#输出时间、字符串截取、解析html" aria-hidden="true">#</a> 输出时间、字符串截取、解析html</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{.now}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{date .now &quot;Y-m-d H:m:s&quot;}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{substr .title 0 3}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{html2str .html}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  // 只输出字符串
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{str2html .html}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span> // 转化为html标签
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="布局" tabindex="-1"><a class="header-anchor" href="#布局" aria-hidden="true">#</a> 布局</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//布局
view中{{.LayoutContent}}
controller中会根据TplName解析html，并把内容赋值到{{.LayoutContent}}
//布局页面
c.Layout = &quot;layout.html&quot;
//内容页面
c.TplName = &quot;content.html&quot;
//其他的部分
c.LayoutSections = make(map[string]string)
//页面使用的css部分
c.LayoutSections[&quot;HtmlHead&quot;] = &quot;head.tpl&quot;
//页面使用的js部分
c.LayoutSections[&quot;Scripts&quot;] = &quot;scripts.tpl&quot;
//页面的补充部分，可做为底部的版权部分时候
c.LayoutSections[&quot;SideBar&quot;] = &quot;sidebar.tpl&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{.LayoutContent}}
https://www.cnblogs.com/liyao0312/p/8359442.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="model层" tabindex="-1"><a class="header-anchor" href="#model层" aria-hidden="true">#</a> Model层</h3><h4 id="添加包" tabindex="-1"><a class="header-anchor" href="#添加包" aria-hidden="true">#</a> 添加包</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 在main.go引用包，使其全局可使用。函数名要大写外部才可引用</span>
beego<span class="token punctuation">.</span><span class="token function">AddFuncMap</span><span class="token punctuation">(</span><span class="token string">&quot;unixToDate&quot;</span><span class="token punctuation">,</span> models<span class="token punctuation">.</span>UnixToDate<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="连接数据库" tabindex="-1"><a class="header-anchor" href="#连接数据库" aria-hidden="true">#</a> 连接数据库</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// default表示默认，不可改为localhost，必须要注册主机为default 要手动创建beego_test数据库和user表</span>
<span class="token boolean">_</span><span class="token operator">=</span>orm<span class="token punctuation">.</span><span class="token function">RegisterDriver</span><span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> orm<span class="token punctuation">.</span>DRMySQL<span class="token punctuation">)</span>    <span class="token comment">//可以不加</span>
err<span class="token operator">:=</span>orm<span class="token punctuation">.</span><span class="token function">RegisterDataBase</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mysql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root:111111@/beego_test?charset=utf8&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;数据库连接失败&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;数据库连接成功&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//注册表，User要和user表的字段一一对应，User为定义的结构体</span>
orm<span class="token punctuation">.</span><span class="token function">RegisterModel</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查" aria-hidden="true">#</a> 增删改查</h4>`,40),b={href:"https://www.cnblogs.com/guyouyin123/p/14041606.html#%E6%8F%92%E5%85%A5",target:"_blank",rel:"noopener noreferrer"},g=e(`<h4 id="插入数据" tabindex="-1"><a class="header-anchor" href="#插入数据" aria-hidden="true">#</a> 插入数据</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 传参要加&amp; 原因：https://blog.csdn.net/weixin_42178081/article/details/83146341</span>
u<span class="token operator">:=</span>models<span class="token punctuation">.</span>User<span class="token punctuation">{</span>Id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> Name<span class="token punctuation">:</span> <span class="token string">&quot;渣男&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">if</span> res<span class="token punctuation">,</span>err<span class="token operator">:=</span>orm<span class="token punctuation">.</span><span class="token function">NewOrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;失败&quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">,</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">,</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="更新数据" tabindex="-1"><a class="header-anchor" href="#更新数据" aria-hidden="true">#</a> 更新数据</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 解析表单并更新数据</span>
<span class="token keyword">var</span> m models<span class="token punctuation">.</span>MenuModel
<span class="token keyword">if</span> err<span class="token operator">:=</span>c<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">==</span><span class="token boolean">nil</span><span class="token punctuation">{</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> orm<span class="token punctuation">.</span><span class="token function">NewOrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="查询并更新数据" tabindex="-1"><a class="header-anchor" href="#查询并更新数据" aria-hidden="true">#</a> 查询并更新数据</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>o <span class="token operator">:=</span> orm<span class="token punctuation">.</span><span class="token function">NewOrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//1.要先获得一个ORM对象</span>
<span class="token keyword">var</span> user User  <span class="token comment">//2.定义一个要获取数据的结构体对象</span>
user<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;itcast&quot;</span> <span class="token comment">//3.给结构体对象赋值，相当于给查询条件赋值</span>


err <span class="token operator">:=</span> o<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span> <span class="token comment">//4.查询,用o.Read()</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">{</span> 
  beego<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;查询数据错误&quot;</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span> 
  <span class="token keyword">return</span> 
<span class="token punctuation">}</span>
注意：如果查询字段是查询对象的主键的话，可以不用指定查询字段
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="树的运用" tabindex="-1"><a class="header-anchor" href="#树的运用" aria-hidden="true">#</a> 树的运用</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 树的运用(重点)</span>
<span class="token keyword">func</span> <span class="token function">MenuStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span>MenuTree <span class="token punctuation">{</span>
	query <span class="token operator">:=</span> orm<span class="token punctuation">.</span><span class="token function">NewOrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryTable</span><span class="token punctuation">(</span><span class="token string">&quot;menu&quot;</span><span class="token punctuation">)</span>
	data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>MenuModel<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
	query<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">&quot;parent&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;-seq&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">All</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span>

	<span class="token keyword">var</span> menu <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span>MenuTree<span class="token punctuation">)</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> data<span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token number">0</span><span class="token operator">==</span>v<span class="token punctuation">.</span>Parent <span class="token punctuation">{</span>
				<span class="token keyword">var</span> tree <span class="token operator">=</span> <span class="token builtin">new</span> <span class="token punctuation">(</span>MenuTree<span class="token punctuation">)</span>
				tree<span class="token punctuation">.</span>MenuModel <span class="token operator">=</span> <span class="token operator">*</span>v
				menu<span class="token punctuation">[</span>v<span class="token punctuation">.</span>Mid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>tree
			<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
				<span class="token keyword">if</span> tmp<span class="token punctuation">,</span>ok <span class="token operator">:=</span> menu<span class="token punctuation">[</span>v<span class="token punctuation">.</span>Parent<span class="token punctuation">]</span><span class="token punctuation">;</span>ok<span class="token punctuation">{</span>
					tmp<span class="token punctuation">.</span>Child <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>Child<span class="token punctuation">,</span> <span class="token operator">*</span>v<span class="token punctuation">)</span>
					menu<span class="token punctuation">[</span>v<span class="token punctuation">.</span>Parent<span class="token punctuation">]</span> <span class="token operator">=</span> tmp
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> menu
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="orm接口" tabindex="-1"><a class="header-anchor" href="#orm接口" aria-hidden="true">#</a> ORM接口</h4>`,9),h={href:"https://www.cnblogs.com/nulige/p/10370085.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Ormer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">Read</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> …<span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">ReadOrCreate</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> …<span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">InsertMulti</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> …<span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">LoadRelated</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> …<span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
    <span class="token function">QueryM2M</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> QueryM2Mer
    <span class="token function">QueryTable</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> QuerySeter
    <span class="token function">Using</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
    <span class="token function">Raw</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> …<span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> RawSeter
    <span class="token function">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Driver
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="beego下orm过滤器filter的高级用法" tabindex="-1"><a class="header-anchor" href="#beego下orm过滤器filter的高级用法" aria-hidden="true">#</a> Beego下ORM过滤器Filter的高级用法</h4>`,2),x={href:"https://blog.csdn.net/qq_33249452/article/details/89703585",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.csdn.net/yang731227/article/details/82503059",target:"_blank",rel:"noopener noreferrer"},w={href:"https://blog.csdn.net/hbshhb/article/details/90267988",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Exclude(&quot;parent&quot;, 0) //where parent != 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="orm高级操作" tabindex="-1"><a class="header-anchor" href="#orm高级操作" aria-hidden="true">#</a> orm高级操作</h3>`,2),_={href:"https://blog.csdn.net/yang731227/article/details/82503059",target:"_blank",rel:"noopener noreferrer"},j=e(`<h4 id="查找并更新字段" tabindex="-1"><a class="header-anchor" href="#查找并更新字段" aria-hidden="true">#</a> 查找并更新字段</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>query := o.QueryTable(&quot;collect&quot;)
_, _ = query.Filter(&quot;parent&quot;, cid).Update(orm.Params{&quot;parent&quot;: 0})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2>`,3),S={href:"https://www.cnblogs.com/kumufengchun/p/10384325.html",target:"_blank",rel:"noopener noreferrer"},M=e(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Ctx:Context(上下文) db_alias:数据库别名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="方法介绍" tabindex="-1"><a class="header-anchor" href="#方法介绍" aria-hidden="true">#</a> 方法介绍</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>beego.Controller 拥有很多方法，其中包括 Init、Prepare、Post、Get、Delete、Head 等方法
其中Prepare方法是每次请求都会调用的方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>json.Unmarshal(str, &amp;authobj)
将json格式字符串转化为切片
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sort.Ints(auth) // 排序整型切片

sort.SearchInts(auth,v.Mid) // 查找切片元素，返回元素下标
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><h3 id="解析json数据" tabindex="-1"><a class="header-anchor" href="#解析json数据" aria-hidden="true">#</a> 解析json数据</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token string">&quot;github.com/bitly/go-simplejson&quot;</span>  <span class="token comment">// 引入包</span>
simplejson<span class="token punctuation">.</span><span class="token function">NewJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>menu<span class="token punctuation">.</span>Format<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包部署" tabindex="-1"><a class="header-anchor" href="#打包部署" aria-hidden="true">#</a> 打包部署</h3>`,10),O={href:"https://www.imooc.com/video/20280",target:"_blank",rel:"noopener noreferrer"},C=e(`<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="安装beego脚手架报错" tabindex="-1"><a class="header-anchor" href="#安装beego脚手架报错" aria-hidden="true">#</a> 安装beego脚手架报错</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>报错：go: cannot use path@version syntax in GOPATH mode
解决：GO的语言版本大于1.13的时候，执行以下命令即可
	 go env -w GO111MODULE=on
	 
报错: because connected host has failed to respond(github访问慢，响应超时)
解决：在cmd执行命令
	 go env -w GO111MODULE=on
	 go env -w GOPROXY=https://goproxy.io,direct
网址：https://blog.csdn.net/qq_42739865/article/details/108667708

报错：&#39;bee&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。
解决：安装bee后，GOPATH的bin目录会添加bin.exe文件，故将GOPATH/bin添加到系统变量即可
网址：https://studygolang.com/articles/29552?fr=sidebar
	 https://www.it610.com/article/1297583915581644800.htm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体变量无法使用" tabindex="-1"><a class="header-anchor" href="#结构体变量无法使用" aria-hidden="true">#</a> 结构体变量无法使用</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>报错：num1 is an unexported field of struct type interface {}
原因：定义结构体时，不知结构体名要大写首字母，结构体参数也要
具体：https://studygolang.com/articles/829
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表不存在-常犯" tabindex="-1"><a class="header-anchor" href="#表不存在-常犯" aria-hidden="true">#</a> 表不存在(常犯)</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>query := orm.NewOrm().QueryTable(&quot;user&quot;)
报错：Handler crashed with error &lt;Ormer.QueryTable&gt; table name: \`user\` not exists
解决：要先注册表 orm.RegisterModel(new(UserModel))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="无法注册数据库" tabindex="-1"><a class="header-anchor" href="#无法注册数据库" aria-hidden="true">#</a> 无法注册数据库</h3>`,8),P={href:"https://blog.csdn.net/xuelang532777032/article/details/101486047",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//要安装mysql包</span>
<span class="token keyword">go</span> install github<span class="token punctuation">.</span>com<span class="token operator">/</span>Go<span class="token operator">-</span>SQL<span class="token operator">-</span>Driver<span class="token operator">/</span>MySQL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表字段对立" tabindex="-1"><a class="header-anchor" href="#表字段对立" aria-hidden="true">#</a> 表字段对立</h3>`,2),U={href:"https://blog.csdn.net/yyh4everOrz/article/details/79504868",target:"_blank",rel:"noopener noreferrer"},L=n("h3",{id:"error-1364-field-cid-doesn-t-have-a-default-value",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#error-1364-field-cid-doesn-t-have-a-default-value","aria-hidden":"true"},"#"),s(" Error 1364: Field 'cid' doesn't have a default value")],-1),R={href:"https://www.cnblogs.com/jsondai/p/11490434.html",target:"_blank",rel:"noopener noreferrer"},T=e(`<h3 id="老是自动注册xx-model表" tabindex="-1"><a class="header-anchor" href="#老是自动注册xx-model表" aria-hidden="true">#</a> 老是自动注册xx_model表</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>没有TableName函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="unexpected-end-of-json-input" tabindex="-1"><a class="header-anchor" href="#unexpected-end-of-json-input" aria-hidden="true">#</a> unexpected end of JSON input</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>要在conf中写入copyrequestbody=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4);function I(D,B){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[n("a",r,[s("https://beego.me/"),t(a)])]),d,n("p",null,[n("a",k,[s("教程"),t(a)])]),n("p",null,[n("a",v,[s("项目"),t(a)])]),m,n("p",null,[n("a",b,[s("https://www.cnblogs.com/guyouyin123/p/14041606.html#插入"),t(a)])]),g,n("p",null,[n("a",h,[s("https://www.cnblogs.com/nulige/p/10370085.html"),t(a)])]),f,n("p",null,[n("a",x,[s("https://blog.csdn.net/qq_33249452/article/details/89703585"),t(a)])]),n("p",null,[n("a",q,[s("https://blog.csdn.net/yang731227/article/details/82503059"),t(a)])]),n("p",null,[n("a",w,[s("https://blog.csdn.net/hbshhb/article/details/90267988"),t(a)])]),y,n("p",null,[n("a",_,[s("网址"),t(a)])]),j,n("p",null,[n("a",S,[s("启用日志"),t(a)])]),M,n("p",null,[n("a",O,[s("https://www.imooc.com/video/20280"),t(a)])]),C,n("p",null,[n("a",P,[s("https://blog.csdn.net/xuelang532777032/article/details/101486047"),t(a)])]),N,n("p",null,[n("a",U,[s("https://blog.csdn.net/yyh4everOrz/article/details/79504868"),t(a)])]),L,n("p",null,[n("a",R,[s("https://www.cnblogs.com/jsondai/p/11490434.html"),t(a)])]),T])}const A=p(l,[["render",I],["__file","Beego 笔记.html.vue"]]);export{A as default};
