import{_ as i,W as a,X as e,a2 as g}from"./framework-5d92cd28.js";const t="/assets/image-20220927152606790-10057373.png",n="/assets/image-20220927153206014-107b16f5.png",s="/assets/image-20220927153713717-5e056c4d.png",r="/assets/image-20220927154011718-0428b21e.png",d="/assets/image-20220927154347804-b43eb9a0.png",c="/assets/image-20220928101436832-3ecbe30a.png",o="/assets/image-20220928101515519-4fe1e72c.png",m="/assets/image-20220929094647712-71debd0e.png",p="/assets/image-20220929095212521-c6a69b49.png",f="/assets/image-20220929095202581-aca9fcf1.png",l="/assets/image-20220929095459550-93c5ddc8.png",h="/assets/image-20220929101620041-418eef13.png",u="/assets/image-20220929101504543-3e25c668.png",b="/assets/image-20220929101426693-e1ad69a6.png",_="/assets/image-20220929101356777-7cba5db8.png",x="/assets/image-20220929102704826-1f5cbfcf.png",y="/assets/image-20220929103556083-dfa8a175.png",z="/assets/image-20220929103607893-ffdb7e6d.png",v="/assets/image-20220929103732870-639d3258.png",w="/assets/image-20220929155912229-1b90e911.png",G="/assets/image-20220929160435250-7a4a747b.png",C="/assets/image-20220929160404926-667f0af2.png",k="/assets/image-20220929160801461-2619dd69.png",B="/assets/image-20220929162535798-ff9c89f3.png",M="/assets/image-20220929163136074-b207a351.png",P="/assets/image-20220929164100533-c0cd07dc.png",S="/assets/image-20221010181400707-7948dcac.png",U="/assets/image-20221010182018573-57650574.png",W="/assets/image-20221010182417132-73a41475.png",D="/assets/image-20221010183115266-240df440.png",H="/assets/image-20221010184643118-40809515.png",T="/assets/image-20221010184614501-ebada4a2.png",A="/assets/image-20221010185316375-7119c4d9.png",E="/assets/image-20221010190407375-6be46601.png",F="/assets/image-20221010190529657-877706cf.png",I="/assets/image-20221011091535260-b24dec1e.png",L="/assets/image-20221011092321969-c66b6e47.png",N="/assets/image-20221013102443315-e21f0381.png",O="/assets/image-20221013110245975-92c188e8.png",R="/assets/image-20221013110218853-ea724f29.png",V="/assets/image-20221011160447559-d8d76ce6.png",X="/assets/image-20221011160527135-5a799139.png",j="/assets/image-20221011160422650-280e10ab.png",q="/assets/image-20221011163513324-1db275f8.png",J="/assets/image-20221012153649479-c10324cd.png",K="/assets/image-20221012154038034-8a102539.png",Q="/assets/image-20221012154805011-fa982c01.png",Y="/assets/image-20221013081740765-1b929474.png",Z="/assets/image-20221013082519202-973c3431.png",$="/assets/image-20221013082802614-7c54e381.png",ii="/assets/image-20221013083004114-0576cf5b.png",ai="/assets/image-20221013083929612-e26057aa.png",ei="/assets/image-20221013105839121-c10d76cd.png",gi="/assets/image-20221013135242354-ec4b6ce1.png",ti="/assets/image-20221013135507082-e4650517.png",ni="/assets/image-20221013135808180-3531602e.png",si="/assets/image-20221013140553559-96252cf0.png",ri="/assets/image-20221013140816647-2ec427be.png",di="/assets/image-20221013140931286-aab5358d.png",ci="/assets/image-20221013141149553-f43e3409.png",oi="/assets/image-20221013170121341-bc4f15b2.png",mi="/assets/image-20221013171015319-75d3bb2a.png",pi="/assets/image-20221013170239054-df4550d7.png",fi="/assets/image-20221013170951013-98a1d063.png",li="/assets/image-20221013171156484-bb796887.png",hi="/assets/image-20221017162627317-28b558dc.png",ui="/assets/image-20221017161950235-cde559d4.png",bi="/assets/image-20221017162509249-b20eef68.png",_i="/assets/image-20221017162709487-2ba16ebf.png",xi="/assets/image-20221017162720213-479a6608.png",yi="/assets/image-20221017162923687-1b2e86ae.png",zi="/assets/image-20221017163213455-b15b4daf.png",vi="/assets/image-20221017163227399-a1f158d0.png",wi="/assets/image-20221017185647340-20aff0ef.png",Gi="/assets/image-20221017190040539-3add57a5.png",Ci="/assets/image-20221017190326423-c1746bc2.png",ki="/assets/image-20221017190724956-f335823c.png",Bi="/assets/image-20221017191100560-a9fb7717.png",Mi="/assets/image-20221017191424862-e8bee45a.png",Pi="/assets/image-20221017192230675-eb27069c.png",Si="/assets/image-20221017192203649-b927a891.png",Ui="/assets/image-20221017192413379-2c419fd6.png",Wi="/assets/image-20221017193725237-374ada6c.png",Di="/assets/image-20221017194350464-58463428.png",Hi="/assets/image-20221017194635870-cb1d660e.png",Ti="/assets/image-20221019094947712-68bb2769.png",Ai="/assets/image-20221019095727664-9588083f.png",Ei="/assets/image-20221019102924228-bf73aeec.png",Fi="/assets/image-20221020081234611-c8aa82e5.png",Ii="/assets/image-20221020083630478-79f52aef.png",Li="/assets/image-20221020083643148-e662116c.png",Ni="/assets/image-20221020084104733-dd7a5f82.png",Oi="/assets/image-20221020084445915-e451abba.png",Ri="/assets/image-20221020084714678-fb850218.png",Vi="/assets/image-20221020102522461-ce32ce77.png",Xi="/assets/image-20221020104734007-417c84ab.png",ji="/assets/image-20221020091021985-d6bae8a3.png",qi="/assets/image-20221020091040750-34730b0e.png",Ji="/assets/image-20221020091051422-f80aeddb.png",Ki="/assets/image-20221020091453830-eb5c440b.png",Qi="/assets/image-20221020091803437-f8a9ceed.png",Yi="/assets/image-20221020091905094-1e68cd1b.png",Zi="/assets/image-20221020092154738-4493f9bf.png",$i="/assets/image-20221020094653329-269ddd1a.png",ia="/assets/image-20221020095923382-fd6c25cc.png",aa="/assets/image-20221020100928373-acc53384.png",ea="/assets/image-20221020101216287-55c9b947.png",ga="/assets/image-20221020101414429-c34e9b70.png",ta="/assets/image-20221020101519707-769aa742.png",na="/assets/image-20221020101657647-a1fda465.png",sa="/assets/image-20221020101846981-febbd115.png",ra="/assets/image-20221020142114577-f61dead6.png",da="/assets/image-20221020142151016-b69ab148.png",ca="/assets/image-20221020142219701-e7b835f9.png",oa="/assets/image-20221020142346116-754fdb0c.png",ma="/assets/image-20221020142930308-33aa1a9b.png",pa="/assets/image-20221020143039031-df10b8f1.png",fa="/assets/image-20221020143156106-3b273bab.png",la="/assets/image-20221020144751592-5061d606.png",ha={},ua=g('<h2 id="知识" tabindex="-1"><a class="header-anchor" href="#知识" aria-hidden="true">#</a> 知识</h2><h3 id="各语言区别" tabindex="-1"><a class="header-anchor" href="#各语言区别" aria-hidden="true">#</a> 各语言区别</h3><figure><img src="'+t+'" alt="image-20220927152606790" tabindex="0" loading="lazy"><figcaption>image-20220927152606790</figcaption></figure><h3 id="runtime" tabindex="-1"><a class="header-anchor" href="#runtime" aria-hidden="true">#</a> runtime</h3><figure><img src="'+n+'" alt="image-20220927153206014" tabindex="0" loading="lazy"><figcaption>image-20220927153206014</figcaption></figure><h3 id="go编译过程" tabindex="-1"><a class="header-anchor" href="#go编译过程" aria-hidden="true">#</a> Go编译过程</h3><figure><img src="'+s+'" alt="image-20220927153713717" tabindex="0" loading="lazy"><figcaption>image-20220927153713717</figcaption></figure><h3 id="查看中间码生成" tabindex="-1"><a class="header-anchor" href="#查看中间码生成" aria-hidden="true">#</a> 查看中间码生成</h3><figure><img src="'+r+'" alt="image-20220927154011718" tabindex="0" loading="lazy"><figcaption>image-20220927154011718</figcaption></figure><h3 id="查看机器码" tabindex="-1"><a class="header-anchor" href="#查看机器码" aria-hidden="true">#</a> 查看机器码</h3><figure><img src="'+d+`" alt="image-20220927154347804" tabindex="0" loading="lazy"><figcaption>image-20220927154347804</figcaption></figure><h3 id="空结构体" tabindex="-1"><a class="header-anchor" href="#空结构体" aria-hidden="true">#</a> 空结构体</h3><p>长度为0，并且都指向同一个地址（runtime.malloc.zero），主要为了节约内存</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>由于字符串底层实际是结构体，因此unsafe.Sizeof()任何字符串长度都为16</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 实际操作是结构体
type stringStruct struct {
	str unsafe.Pointer
	len int
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// reflect/value.go下有类似结构体
type StringHeader struct {
	Data uintptr
	Len  int
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unicode" tabindex="-1"><a class="header-anchor" href="#unicode" aria-hidden="true">#</a> Unicode</h3><figure><img src="`+c+'" alt="image-20220928101436832" tabindex="0" loading="lazy"><figcaption>image-20220928101436832</figcaption></figure><h3 id="utf-8" tabindex="-1"><a class="header-anchor" href="#utf-8" aria-hidden="true">#</a> UTF-8</h3><figure><img src="'+o+'" alt="image-20220928101515519" tabindex="0" loading="lazy"><figcaption>image-20220928101515519</figcaption></figure><h3 id="切片" tabindex="-1"><a class="header-anchor" href="#切片" aria-hidden="true">#</a> 切片</h3><figure><img src="'+m+'" alt="image-20220929094647712" tabindex="0" loading="lazy"><figcaption>image-20220929094647712</figcaption></figure><h3 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h3><h4 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> HashMap</h4><h5 id="开放寻址法" tabindex="-1"><a class="header-anchor" href="#开放寻址法" aria-hidden="true">#</a> 开放寻址法</h5><figure><img src="'+p+'" alt="image-20220929095212521" tabindex="0" loading="lazy"><figcaption>image-20220929095212521</figcaption></figure><h5 id="拉链法" tabindex="-1"><a class="header-anchor" href="#拉链法" aria-hidden="true">#</a> 拉链法</h5><figure><img src="'+f+'" alt="image-20220929095202581" tabindex="0" loading="lazy"><figcaption>image-20220929095202581</figcaption></figure><h4 id="map-1" tabindex="-1"><a class="header-anchor" href="#map-1" aria-hidden="true">#</a> map</h4><h5 id="结构原理" tabindex="-1"><a class="header-anchor" href="#结构原理" aria-hidden="true">#</a> 结构原理</h5><figure><img src="'+l+'" alt="image-20220929095459550" tabindex="0" loading="lazy"><figcaption>image-20220929095459550</figcaption></figure><figure><img src="'+h+'" alt="image-20220929101620041" tabindex="0" loading="lazy"><figcaption>image-20220929101620041</figcaption></figure><figure><img src="'+u+'" alt="image-20220929101504543" tabindex="0" loading="lazy"><figcaption>image-20220929101504543</figcaption></figure><h5 id="字面量操作" tabindex="-1"><a class="header-anchor" href="#字面量操作" aria-hidden="true">#</a> 字面量操作</h5><figure><img src="'+b+'" alt="image-20220929101426693" tabindex="0" loading="lazy"><figcaption>image-20220929101426693</figcaption></figure><figure><img src="'+_+'" alt="image-20220929101356777" tabindex="0" loading="lazy"><figcaption>image-20220929101356777</figcaption></figure><h5 id="溢出扩容" tabindex="-1"><a class="header-anchor" href="#溢出扩容" aria-hidden="true">#</a> 溢出扩容</h5><figure><img src="'+x+'" alt="image-20220929102704826" tabindex="0" loading="lazy"><figcaption>image-20220929102704826</figcaption></figure><p>步骤</p><ol><li>创建新的桶（可能扩容），把旧的桶挂载到oldbuckets</li><li>采用渐进式迁移数据</li></ol><figure><img src="'+y+'" alt="image-20220929103556083" tabindex="0" loading="lazy"><figcaption>image-20220929103556083</figcaption></figure><p>当对旧桶操作时（如更新数据），会在操作完后还要负责桶的迁移。</p><p>如下图，旧桶B=2，新桶B=3, 当某键通过hasher得到哈希值时，由于新桶B=3,取该哈希值的后三位，此时后三位数字有两种可能，要么110，要么010，则定位的新桶桶号会有两个，3和6号桶，然后迁移旧桶数据到对应新桶。可以看出将旧桶的数据一分为二放置到新桶上，解决了溢出桶问题</p><figure><img src="'+z+'" alt="image-20220929103607893" tabindex="0" loading="lazy"><figcaption>image-20220929103607893</figcaption></figure><figure><img src="'+v+'" alt="image-20220929103732870" tabindex="0" loading="lazy"><figcaption>image-20220929103732870</figcaption></figure><ol start="3"><li>当发现旧桶所有数据迁移完后，便回收旧桶空间</li></ol><h4 id="sync-map" tabindex="-1"><a class="header-anchor" href="#sync-map" aria-hidden="true">#</a> sync.Map</h4><p>由于map不允许并发（加锁控制并发会影响读写性能），于是go开发了sync.Map来支持并发的map</p><figure><img src="'+w+'" alt="image-20220929155912229" tabindex="0" loading="lazy"><figcaption>image-20220929155912229</figcaption></figure><figure><img src="'+G+'" alt="image-20220929160435250" tabindex="0" loading="lazy"><figcaption>image-20220929160435250</figcaption></figure><figure><img src="'+C+'" alt="image-20220929160404926" tabindex="0" loading="lazy"><figcaption>image-20220929160404926</figcaption></figure><p>追加后读写，先走m, 发现amended = true,走dirty,读到值后，misses加1。知道misses等于dirty长度的时候，就忍不了了，因为经常走dirty流程比较繁琐。于是m的map指向dirty,dirty的map变为空，同时amended = true，表示m的map已完整，misses归零。当下次要追加操作访问dirty时，dirty重建read的map。</p><figure><img src="'+k+'" alt="image-20220929160801461" tabindex="0" loading="lazy"><figcaption>image-20220929160801461</figcaption></figure><figure><img src="'+B+'" alt="image-20220929162535798" tabindex="0" loading="lazy"><figcaption>image-20220929162535798</figcaption></figure><h3 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> interface</h3><figure><img src="'+M+`" alt="image-20220929163136074" tabindex="0" loading="lazy"><figcaption>image-20220929163136074</figcaption></figure><h4 id="结构体和指针实现接口区别" tabindex="-1"><a class="header-anchor" href="#结构体和指针实现接口区别" aria-hidden="true">#</a> 结构体和指针实现接口区别</h4><p>用结构体实现的方法，编译时会自动生成该结构体指针实现的方法。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type children interface{ grade() }
type student struct {}
func(s student) grade() {}

var c children = &amp;student{} // 不会报错，编译时自动生成该结构体指针的grade方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而用结构体指针实现的方法，编译时不会自动生成结构体实现的方法。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type children interface{ grade() }
type student struct {}
func(s *student) grade() {}

var c children = student{} // 会报错，编译没有实现实例结构体的grade方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是个单向过程。</p><figure><img src="`+P+`" alt="image-20220929164100533" tabindex="0" loading="lazy"><figcaption>image-20220929164100533</figcaption></figure><h4 id="普通接口" tabindex="-1"><a class="header-anchor" href="#普通接口" aria-hidden="true">#</a> 普通接口</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type iface struct {
	tab  *itab
	data unsafe.Pointer
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="空接口" tabindex="-1"><a class="header-anchor" href="#空接口" aria-hidden="true">#</a> 空接口</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type eface struct {
	_type *_type
	data  unsafe.Pointer
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比普通接口更省空间，常用于任意类型作为函数入参</p><h3 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程</h3><figure><img src="`+S+'" alt="image-20221010181400707" tabindex="0" loading="lazy"><figcaption>image-20221010181400707</figcaption></figure><h4 id="底层结构" tabindex="-1"><a class="header-anchor" href="#底层结构" aria-hidden="true">#</a> 底层结构</h4><figure><img src="'+U+'" alt="image-20221010182018573" tabindex="0" loading="lazy"><figcaption>image-20221010182018573</figcaption></figure><figure><img src="'+W+'" alt="image-20221010182417132" tabindex="0" loading="lazy"><figcaption>image-20221010182417132</figcaption></figure><figure><img src="'+D+'" alt="image-20221010183115266" tabindex="0" loading="lazy"><figcaption>image-20221010183115266</figcaption></figure><figure><img src="'+H+'" alt="image-20221010184643118" tabindex="0" loading="lazy"><figcaption>image-20221010184643118</figcaption></figure><h4 id="gmp调度模型" tabindex="-1"><a class="header-anchor" href="#gmp调度模型" aria-hidden="true">#</a> GMP调度模型</h4><figure><img src="'+T+'" alt="image-20221010184614501" tabindex="0" loading="lazy"><figcaption>image-20221010184614501</figcaption></figure><p>优先执行新建协程</p><figure><img src="'+A+'" alt="image-20221010185316375" tabindex="0" loading="lazy"><figcaption>image-20221010185316375</figcaption></figure><h4 id="解决饥饿问题" tabindex="-1"><a class="header-anchor" href="#解决饥饿问题" aria-hidden="true">#</a> 解决饥饿问题</h4><p>切换线程方案</p><figure><img src="'+E+'" alt="image-20221010190407375" tabindex="0" loading="lazy"><figcaption>image-20221010190407375</figcaption></figure><figure><img src="'+F+'" alt="image-20221010190529657" tabindex="0" loading="lazy"><figcaption>image-20221010190529657</figcaption></figure><p>每次函数跳转会使用morestack方法来判断协程栈空间是否足够，常用，</p><p>故在morestack中加入钩子，判断该协程是否抢占执行（超过10ms即抢占）。</p><p>若抢占则直接跳转到schedule</p><figure><img src="'+I+'" alt="image-20221011091535260" tabindex="0" loading="lazy"><figcaption>image-20221011091535260</figcaption></figure><p>若一直没有函数跳转，则会使用线程信号，线程信号会让线程紧急跳转到某个函数。</p><p>先注册SIGURG信号的处理函数，当GC工作时，基本线程业务都停止了，</p><p>然后GC向目标线程发送信号。线程收到信号，触发调度</p><figure><img src="'+L+`" alt="image-20221011092321969" tabindex="0" loading="lazy"><figcaption>image-20221011092321969</figcaption></figure><h4 id="协程过多问题" tabindex="-1"><a class="header-anchor" href="#协程过多问题" aria-hidden="true">#</a> 协程过多问题</h4><p>利用channel的缓冲区，来控制协程运行的数量。 当channel满后，会卡住，无法创建新的协程。</p><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h3><h4 id="问题检测" tabindex="-1"><a class="header-anchor" href="#问题检测" aria-hidden="true">#</a> 问题检测</h4><p>锁拷贝有可能导致死锁问题</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go vet main.go // 查看有无复制锁
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看是否有数据竞争问题</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>go build -race main.go 
.\\main.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>死锁检测go-deadlock</p><figure><img src="`+N+'" alt="image-20221013102443315" tabindex="0" loading="lazy"><figcaption>image-20221013102443315</figcaption></figure><h4 id="atomic" tabindex="-1"><a class="header-anchor" href="#atomic" aria-hidden="true">#</a> atomic</h4><p>atomic包底层加了硬件级别的锁</p><h4 id="sema锁" tabindex="-1"><a class="header-anchor" href="#sema锁" aria-hidden="true">#</a> sema锁</h4><p>信号锁，经常用作休眠协程队列</p><figure><img src="'+O+'" alt="image-20221013110245975" tabindex="0" loading="lazy"><figcaption>image-20221013110245975</figcaption></figure><figure><img src="'+R+'" alt="image-20221013110218853" tabindex="0" loading="lazy"><figcaption>image-20221013110218853</figcaption></figure><h4 id="mutex锁" tabindex="-1"><a class="header-anchor" href="#mutex锁" aria-hidden="true">#</a> mutex锁</h4><figure><img src="'+V+'" alt="image-20221011160447559" tabindex="0" loading="lazy"><figcaption>image-20221011160447559</figcaption></figure><figure><img src="'+X+'" alt="image-20221011160527135" tabindex="0" loading="lazy"><figcaption>image-20221011160527135</figcaption></figure><figure><img src="'+j+'" alt="image-20221011160422650" tabindex="0" loading="lazy"><figcaption>image-20221011160422650</figcaption></figure><figure><img src="'+q+'" alt="image-20221011163513324" tabindex="0" loading="lazy"><figcaption>image-20221011163513324</figcaption></figure><h4 id="rwmutex锁" tabindex="-1"><a class="header-anchor" href="#rwmutex锁" aria-hidden="true">#</a> rwmutex锁</h4><p>有写锁，读写都不行；有读锁，可以继续读，但不能写</p><figure><img src="'+J+'" alt="image-20221012153649479" tabindex="0" loading="lazy"><figcaption>image-20221012153649479</figcaption></figure><figure><img src="'+K+'" alt="image-20221012154038034" tabindex="0" loading="lazy"><figcaption>image-20221012154038034</figcaption></figure><figure><img src="'+Q+'" alt="image-20221012154805011" tabindex="0" loading="lazy"><figcaption>image-20221012154805011</figcaption></figure><figure><img src="'+Y+'" alt="image-20221013081740765" tabindex="0" loading="lazy"><figcaption>image-20221013081740765</figcaption></figure><h4 id="waitgroup锁" tabindex="-1"><a class="header-anchor" href="#waitgroup锁" aria-hidden="true">#</a> waitgroup锁</h4><p>原理：</p><p>wg.Wait()会留意waiter,若waiter为0，则返回，否则waiter+1且休眠等待，线程会卡住。</p><p>wg.Add()和wg.Done()控制counter数量。若counter为0，表示协程任务完成了，则唤醒所有wg.Wait()的线程</p><p>waiter：正在等待的协程</p><p>counter：被等待的，待完成的协程</p><p>sema：协程队列</p><figure><img src="'+Z+'" alt="image-20221013082519202" tabindex="0" loading="lazy"><figcaption>image-20221013082519202</figcaption></figure><figure><img src="'+$+'" alt="image-20221013082802614" tabindex="0" loading="lazy"><figcaption>image-20221013082802614</figcaption></figure><figure><img src="'+ii+'" alt="image-20221013083004114" tabindex="0" loading="lazy"><figcaption>image-20221013083004114</figcaption></figure><h4 id="once锁" tabindex="-1"><a class="header-anchor" href="#once锁" aria-hidden="true">#</a> Once锁</h4><figure><img src="'+ai+'" alt="image-20221013083929612" tabindex="0" loading="lazy"><figcaption>image-20221013083929612</figcaption></figure><h3 id="管道" tabindex="-1"><a class="header-anchor" href="#管道" aria-hidden="true">#</a> 管道</h3><figure><img src="'+ei+'" alt="image-20221013105839121" tabindex="0" loading="lazy"><figcaption>image-20221013105839121</figcaption></figure><h4 id="底层结构-1" tabindex="-1"><a class="header-anchor" href="#底层结构-1" aria-hidden="true">#</a> 底层结构</h4><figure><img src="'+gi+'" alt="image-20221013135242354" tabindex="0" loading="lazy"><figcaption>image-20221013135242354</figcaption></figure><figure><img src="'+ti+'" alt="image-20221013135507082" tabindex="0" loading="lazy"><figcaption>image-20221013135507082</figcaption></figure><figure><img src="'+ni+'" alt="image-20221013135808180" tabindex="0" loading="lazy"><figcaption>image-20221013135808180</figcaption></figure><h4 id="发送数据" tabindex="-1"><a class="header-anchor" href="#发送数据" aria-hidden="true">#</a> 发送数据</h4><p>有等待的接收者，直接发给接收者，然后唤醒该接收者</p><figure><img src="'+si+'" alt="image-20221013140553559" tabindex="0" loading="lazy"><figcaption>image-20221013140553559</figcaption></figure><p>无等待的接收者，将数据放入缓冲区</p><figure><img src="'+ri+'" alt="image-20221013140816647" tabindex="0" loading="lazy"><figcaption>image-20221013140816647</figcaption></figure><p>无等待的接收者，且缓冲区已满。将自己包装成sudog，放入等待发送者队列，休眠。</p><p>直到有接收者从缓冲区获取数据，使缓冲区有空闲，再把该发送者数据放入缓冲区后，才唤醒该发送者</p><figure><img src="'+di+'" alt="image-20221013140931286" tabindex="0" loading="lazy"><figcaption>image-20221013140931286</figcaption></figure><figure><img src="'+ci+'" alt="image-20221013141149553" tabindex="0" loading="lazy"><figcaption>image-20221013141149553</figcaption></figure><h4 id="接收数据" tabindex="-1"><a class="header-anchor" href="#接收数据" aria-hidden="true">#</a> 接收数据</h4><figure><img src="'+oi+'" alt="image-20221013170121341" tabindex="0" loading="lazy"><figcaption>image-20221013170121341</figcaption></figure><p>无缓存，无等待的发送者，自己包装成sudug，休眠。</p><figure><img src="'+mi+'" alt="image-20221013171015319" tabindex="0" loading="lazy"><figcaption>image-20221013171015319</figcaption></figure><p>无缓冲，有等待的发送者，直接获取数据，唤醒该发送者</p><figure><img src="'+pi+'" alt="image-20221013170239054" tabindex="0" loading="lazy"><figcaption>image-20221013170239054</figcaption></figure><p>有缓存数据，直接从缓存中获取数据。</p><figure><img src="'+fi+'" alt="image-20221013170951013" tabindex="0" loading="lazy"><figcaption>image-20221013170951013</figcaption></figure><p>有缓存，且有等待的发送者。从缓存获取数据，将发送者的数据放入缓存中，然后唤醒该发送者。</p><figure><img src="'+li+'" alt="image-20221013171156484" tabindex="0" loading="lazy"><figcaption>image-20221013171156484</figcaption></figure><h3 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp" aria-hidden="true">#</a> TCP</h3><figure><img src="'+hi+'" alt="image-20221017162627317" tabindex="0" loading="lazy"><figcaption>image-20221017162627317</figcaption></figure><h4 id="io模型" tabindex="-1"><a class="header-anchor" href="#io模型" aria-hidden="true">#</a> io模型</h4><h5 id="堵塞io" tabindex="-1"><a class="header-anchor" href="#堵塞io" aria-hidden="true">#</a> 堵塞io</h5><figure><img src="'+ui+'" alt="image-20221017161950235" tabindex="0" loading="lazy"><figcaption>image-20221017161950235</figcaption></figure><figure><img src="'+bi+'" alt="image-20221017162509249" tabindex="0" loading="lazy"><figcaption>image-20221017162509249</figcaption></figure><figure><img src="'+_i+'" alt="image-20221017162709487" tabindex="0" loading="lazy"><figcaption>image-20221017162709487</figcaption></figure><h5 id="非堵塞io" tabindex="-1"><a class="header-anchor" href="#非堵塞io" aria-hidden="true">#</a> 非堵塞io</h5><figure><img src="'+xi+'" alt="image-20221017162720213" tabindex="0" loading="lazy"><figcaption>image-20221017162720213</figcaption></figure><figure><img src="'+yi+'" alt="image-20221017162923687" tabindex="0" loading="lazy"><figcaption>image-20221017162923687</figcaption></figure><h5 id="多路复用" tabindex="-1"><a class="header-anchor" href="#多路复用" aria-hidden="true">#</a> 多路复用</h5><figure><img src="'+zi+'" alt="image-20221017163213455" tabindex="0" loading="lazy"><figcaption>image-20221017163213455</figcaption></figure><figure><img src="'+vi+'" alt="image-20221017163227399" tabindex="0" loading="lazy"><figcaption>image-20221017163227399</figcaption></figure><figure><img src="'+wi+'" alt="image-20221017185647340" tabindex="0" loading="lazy"><figcaption>image-20221017185647340</figcaption></figure><h4 id="netpoll" tabindex="-1"><a class="header-anchor" href="#netpoll" aria-hidden="true">#</a> netpoll</h4><figure><img src="'+Gi+'" alt="image-20221017190040539" tabindex="0" loading="lazy"><figcaption>image-20221017190040539</figcaption></figure><h5 id="netpollinit" tabindex="-1"><a class="header-anchor" href="#netpollinit" aria-hidden="true">#</a> netpollinit</h5><figure><img src="'+Ci+'" alt="image-20221017190326423" tabindex="0" loading="lazy"><figcaption>image-20221017190326423</figcaption></figure><h5 id="netpollopen" tabindex="-1"><a class="header-anchor" href="#netpollopen" aria-hidden="true">#</a> netpollopen</h5><figure><img src="'+ki+'" alt="image-20221017190724956" tabindex="0" loading="lazy"><figcaption>image-20221017190724956</figcaption></figure><h5 id="netpoll-1" tabindex="-1"><a class="header-anchor" href="#netpoll-1" aria-hidden="true">#</a> netpoll</h5><figure><img src="'+Bi+'" alt="image-20221017191100560" tabindex="0" loading="lazy"><figcaption>image-20221017191100560</figcaption></figure><h5 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h5><figure><img src="'+Mi+'" alt="image-20221017191424862" tabindex="0" loading="lazy"><figcaption>image-20221017191424862</figcaption></figure><figure><img src="'+Pi+'" alt="image-20221017192230675" tabindex="0" loading="lazy"><figcaption>image-20221017192230675</figcaption></figure><h5 id="新增" tabindex="-1"><a class="header-anchor" href="#新增" aria-hidden="true">#</a> 新增</h5><figure><img src="'+Si+'" alt="image-20221017192203649" tabindex="0" loading="lazy"><figcaption>image-20221017192203649</figcaption></figure><h5 id="收发数据" tabindex="-1"><a class="header-anchor" href="#收发数据" aria-hidden="true">#</a> 收发数据</h5><figure><img src="'+Ui+'" alt="image-20221017192413379" tabindex="0" loading="lazy"><figcaption>image-20221017192413379</figcaption></figure><figure><img src="'+Wi+'" alt="image-20221017193725237" tabindex="0" loading="lazy"><figcaption>image-20221017193725237</figcaption></figure><figure><img src="'+Di+'" alt="image-20221017194350464" tabindex="0" loading="lazy"><figcaption>image-20221017194350464</figcaption></figure><figure><img src="'+Hi+'" alt="image-20221017194635870" tabindex="0" loading="lazy"><figcaption>image-20221017194635870</figcaption></figure><h4 id="net包" tabindex="-1"><a class="header-anchor" href="#net包" aria-hidden="true">#</a> net包</h4><figure><img src="'+Ti+'" alt="image-20221019094947712" tabindex="0" loading="lazy"><figcaption>image-20221019094947712</figcaption></figure><figure><img src="'+Ai+'" alt="image-20221019095727664" tabindex="0" loading="lazy"><figcaption>image-20221019095727664</figcaption></figure><figure><img src="'+Ei+'" alt="image-20221019102924228" tabindex="0" loading="lazy"><figcaption>image-20221019102924228</figcaption></figure><h4 id="总模型" tabindex="-1"><a class="header-anchor" href="#总模型" aria-hidden="true">#</a> 总模型</h4><figure><img src="'+Fi+'" alt="image-20221020081234611" tabindex="0" loading="lazy"><figcaption>image-20221020081234611</figcaption></figure><h3 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h3><p>go的栈是在堆上分配的</p><p>栈记录了运行记录，本地变量，函数参数，函数指令</p><h4 id="协程栈太小怎么办" tabindex="-1"><a class="header-anchor" href="#协程栈太小怎么办" aria-hidden="true">#</a> 协程栈太小怎么办</h4><h5 id="逃逸分析" tabindex="-1"><a class="header-anchor" href="#逃逸分析" aria-hidden="true">#</a> 逃逸分析</h5><p>将变量从栈上放置到堆上，分别有指针逃逸，空接口逃逸，大变量逃逸</p><figure><img src="'+Ii+'" alt="image-20221020083630478" tabindex="0" loading="lazy"><figcaption>image-20221020083630478</figcaption></figure><figure><img src="'+Li+'" alt="image-20221020083643148" tabindex="0" loading="lazy"><figcaption>image-20221020083643148</figcaption></figure><h4 id="扩容栈空间" tabindex="-1"><a class="header-anchor" href="#扩容栈空间" aria-hidden="true">#</a> 扩容栈空间</h4><figure><img src="'+Ni+'" alt="image-20221020084104733" tabindex="0" loading="lazy"><figcaption>image-20221020084104733</figcaption></figure><h3 id="堆内存" tabindex="-1"><a class="header-anchor" href="#堆内存" aria-hidden="true">#</a> 堆内存</h3><figure><img src="'+Oi+'" alt="image-20221020084445915" tabindex="0" loading="lazy"><figcaption>image-20221020084445915</figcaption></figure><figure><img src="'+Ri+'" alt="image-20221020084714678" tabindex="0" loading="lazy"><figcaption>image-20221020084714678</figcaption></figure><figure><img src="'+Vi+'" alt="image-20221020102522461" tabindex="0" loading="lazy"><figcaption>image-20221020102522461</figcaption></figure><figure><img src="'+Xi+'" alt="image-20221020104734007" tabindex="0" loading="lazy"><figcaption>image-20221020104734007</figcaption></figure><h3 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h3><h4 id="回收方案" tabindex="-1"><a class="header-anchor" href="#回收方案" aria-hidden="true">#</a> 回收方案</h4><p>直接清除，内存碎片化严重</p><p>但由于go的堆结构是以64MB为单位，不用担心碎片化，故采用此方案</p><figure><img src="'+ji+'" alt="image-20221020091021985" tabindex="0" loading="lazy"><figcaption>image-20221020091021985</figcaption></figure><p>每次清除后需要整理，开销大</p><figure><img src="'+qi+'" alt="image-20221020091040750" tabindex="0" loading="lazy"><figcaption>image-20221020091040750</figcaption></figure><p>要开辟一片大空间，内存开销大</p><figure><img src="'+Ji+'" alt="image-20221020091051422" tabindex="0" loading="lazy"><figcaption>image-20221020091051422</figcaption></figure><h4 id="gc原理" tabindex="-1"><a class="header-anchor" href="#gc原理" aria-hidden="true">#</a> GC原理</h4><figure><img src="'+Ki+'" alt="image-20221020091453830" tabindex="0" loading="lazy"><figcaption>image-20221020091453830</figcaption></figure><figure><img src="'+Qi+'" alt="image-20221020091803437" tabindex="0" loading="lazy"><figcaption>image-20221020091803437</figcaption></figure><h5 id="串行gc" tabindex="-1"><a class="header-anchor" href="#串行gc" aria-hidden="true">#</a> 串行GC</h5><p>对性能影响大</p><figure><img src="'+Yi+'" alt="image-20221020091905094" tabindex="0" loading="lazy"><figcaption>image-20221020091905094</figcaption></figure><h4 id="并发垃圾回收" tabindex="-1"><a class="header-anchor" href="#并发垃圾回收" aria-hidden="true">#</a> 并发垃圾回收</h4><h5 id="三色标记法" tabindex="-1"><a class="header-anchor" href="#三色标记法" aria-hidden="true">#</a> 三色标记法</h5><figure><img src="'+Zi+'" alt="image-20221020092154738" tabindex="0" loading="lazy"><figcaption>image-20221020092154738</figcaption></figure><h5 id="删除屏障" tabindex="-1"><a class="header-anchor" href="#删除屏障" aria-hidden="true">#</a> 删除屏障</h5><p>并发时，某指针要释放了，其对应的白色对象要置灰，避免误删</p><figure><img src="'+$i+'" alt="image-20221020094653329" tabindex="0" loading="lazy"><figcaption>image-20221020094653329</figcaption></figure><h5 id="插入屏障" tabindex="-1"><a class="header-anchor" href="#插入屏障" aria-hidden="true">#</a> 插入屏障</h5><p>若对象一开始就没指针引用，而后面才被黑色标记的对象引用。会因此不能将该对象加入灰色队列，最终也没有分析标记该对象，因此被误删。</p><p>而插入屏障会将指针指向的白色对象置灰。而因为该对象加入了灰色队列，因此最终会被分析标记到。</p><figure><img src="'+ia+'" alt="image-20221020095923382" tabindex="0" loading="lazy"><figcaption>image-20221020095923382</figcaption></figure><h5 id="混合屏障" tabindex="-1"><a class="header-anchor" href="#混合屏障" aria-hidden="true">#</a> 混合屏障</h5><figure><img src="'+aa+'" alt="image-20221020100928373" tabindex="0" loading="lazy"><figcaption>image-20221020100928373</figcaption></figure><h4 id="gc触发" tabindex="-1"><a class="header-anchor" href="#gc触发" aria-hidden="true">#</a> GC触发</h4><figure><img src="'+ea+'" alt="image-20221020101216287" tabindex="0" loading="lazy"><figcaption>image-20221020101216287</figcaption></figure><figure><img src="'+ga+'" alt="image-20221020101414429" tabindex="0" loading="lazy"><figcaption>image-20221020101414429</figcaption></figure><p>mallocgc时会伴随GC</p><figure><img src="'+ta+'" alt="image-20221020101519707" tabindex="0" loading="lazy"><figcaption>image-20221020101519707</figcaption></figure><h4 id="gc优化" tabindex="-1"><a class="header-anchor" href="#gc优化" aria-hidden="true">#</a> GC优化</h4><figure><img src="'+na+'" alt="image-20221020101657647" tabindex="0" loading="lazy"><figcaption>image-20221020101657647</figcaption></figure><figure><img src="'+sa+'" alt="image-20221020101846981" tabindex="0" loading="lazy"><figcaption>image-20221020101846981</figcaption></figure><h3 id="cgo" tabindex="-1"><a class="header-anchor" href="#cgo" aria-hidden="true">#</a> cgo</h3><figure><img src="'+ra+'" alt="image-20221020142114577" tabindex="0" loading="lazy"><figcaption>image-20221020142114577</figcaption></figure><figure><img src="'+da+'" alt="image-20221020142151016" tabindex="0" loading="lazy"><figcaption>image-20221020142151016</figcaption></figure><figure><img src="'+ca+'" alt="image-20221020142219701" tabindex="0" loading="lazy"><figcaption>image-20221020142219701</figcaption></figure><figure><img src="'+oa+'" alt="image-20221020142346116" tabindex="0" loading="lazy"><figcaption>image-20221020142346116</figcaption></figure><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer" aria-hidden="true">#</a> defer</h3><figure><img src="'+ma+'" alt="image-20221020142930308" tabindex="0" loading="lazy"><figcaption>image-20221020142930308</figcaption></figure><figure><img src="'+pa+'" alt="image-20221020143039031" tabindex="0" loading="lazy"><figcaption>image-20221020143039031</figcaption></figure><figure><img src="'+fa+'" alt="image-20221020143156106" tabindex="0" loading="lazy"><figcaption>image-20221020143156106</figcaption></figure><h3 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h3><figure><img src="'+la+`" alt="image-20221020144751592" tabindex="0" loading="lazy"><figcaption>image-20221020144751592</figcaption></figure><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>选中结构体，ctrl+i，选择接口，自动生成对应方法
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,257),ba=[ua];function _a(xa,ya){return a(),e("div",null,ba)}const va=i(ha,[["render",_a],["__file","Go 进阶1.html.vue"]]);export{va as default};
