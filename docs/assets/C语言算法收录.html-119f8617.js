const n=JSON.parse('{"key":"v-175d438e","path":"/posts/%E5%90%8E%E7%AB%AF/C/C%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E6%94%B6%E5%BD%95.html","title":"C语言算法收录","lang":"en-US","frontmatter":{"icon":"article","date":"2022-01-10T00:00:00.000Z","title":"C语言算法收录","category":["后端","C"],"tag":["C语言算法收录"],"description":"辗转相除法可求最大公约数和最小公倍数 # include &lt;stdio.h&gt; int main() { long int n,m,t,max,min; scanf(\\"%ld%ld\\",&amp;n,&amp;m); max=n,min=m; while(min!=0){ t=max%min; max=min; min=t; } printf(\\"%ld\\\\n\\",max+m*n/max); return 0; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E5%90%8E%E7%AB%AF/C/C%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95%E6%94%B6%E5%BD%95.html"}],["meta",{"property":"og:site_name","content":"unitiny的宇宙"}],["meta",{"property":"og:title","content":"C语言算法收录"}],["meta",{"property":"og:description","content":"辗转相除法可求最大公约数和最小公倍数 # include &lt;stdio.h&gt; int main() { long int n,m,t,max,min; scanf(\\"%ld%ld\\",&amp;n,&amp;m); max=n,min=m; while(min!=0){ t=max%min; max=min; min=t; } printf(\\"%ld\\\\n\\",max+m*n/max); return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-07-25T09:20:57.000Z"}],["meta",{"property":"article:author","content":"unitiny"}],["meta",{"property":"article:tag","content":"C语言算法收录"}],["meta",{"property":"article:published_time","content":"2022-01-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-25T09:20:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C语言算法收录\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-25T09:20:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"unitiny\\",\\"url\\":\\"#\\"}]}"]]},"headers":[{"level":2,"title":"辗转相除法可求最大公约数和最小公倍数","slug":"辗转相除法可求最大公约数和最小公倍数","link":"#辗转相除法可求最大公约数和最小公倍数","children":[]},{"level":2,"title":"查找字符串某字母定位","slug":"查找字符串某字母定位","link":"#查找字符串某字母定位","children":[]},{"level":2,"title":"数组比较大小并排序","slug":"数组比较大小并排序","link":"#数组比较大小并排序","children":[]},{"level":2,"title":"冒泡排序法  两两对比，逐渐把最大最小数移到后面","slug":"冒泡排序法-两两对比-逐渐把最大最小数移到后面","link":"#冒泡排序法-两两对比-逐渐把最大最小数移到后面","children":[]},{"level":2,"title":"一维指针的应用","slug":"一维指针的应用","link":"#一维指针的应用","children":[]},{"level":2,"title":"字符串处理","slug":"字符串处理","link":"#字符串处理","children":[{"level":3,"title":"介绍：","slug":"介绍","link":"#介绍","children":[]}]}],"git":{"createdTime":1721899257000,"updatedTime":1721899257000,"contributors":[{"name":"unitiny","email":"2069234934@qq.com","commits":1}]},"readingTime":{"minutes":1.51,"words":452},"filePathRelative":"posts/后端/C/C语言算法收录.md","localizedDate":"January 10, 2022","excerpt":"<h2> 辗转相除法可求最大公约数和最小公倍数</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span> <span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">long</span> <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">,</span>m<span class=\\"token punctuation\\">,</span>t<span class=\\"token punctuation\\">,</span>max<span class=\\"token punctuation\\">,</span>min<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">scanf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%ld%ld\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">&amp;</span>n<span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">&amp;</span>m<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  max<span class=\\"token operator\\">=</span>n<span class=\\"token punctuation\\">,</span>min<span class=\\"token operator\\">=</span>m<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>min<span class=\\"token operator\\">!=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    t<span class=\\"token operator\\">=</span>max<span class=\\"token operator\\">%</span>min<span class=\\"token punctuation\\">;</span>\\n    max<span class=\\"token operator\\">=</span>min<span class=\\"token punctuation\\">;</span>\\n    min<span class=\\"token operator\\">=</span>t<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%ld\\\\n\\"</span><span class=\\"token punctuation\\">,</span>max<span class=\\"token operator\\">+</span>m<span class=\\"token operator\\">*</span>n<span class=\\"token operator\\">/</span>max<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
