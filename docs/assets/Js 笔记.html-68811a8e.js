import{_ as i,W as p,X as o,Y as n,Z as a,a0 as e,a2 as t,C as l}from"./framework-5d92cd28.js";const c="/typora-user-images/image-20210524205308219.png",r={},u=n("h1",{id:"js-笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#js-笔记","aria-hidden":"true"},"#"),a(" js 笔记")],-1),d=n("h2",{id:"学习",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习","aria-hidden":"true"},"#"),a(" 学习：")],-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"语法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#语法","aria-hidden":"true"},"#"),a(" 语法：")],-1),m=n("h3",{id:"闭包",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#闭包","aria-hidden":"true"},"#"),a(" 闭包：")],-1),k={href:"https://zhuanlan.zhihu.com/p/22486908",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串：</h3><p>charAt() 指定字符串位置的字母</p><p>split() 分割字符</p><p>arrayObject.slice(start,end) 截取字符</p><p>去掉最后一个字符</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>basic = basic.substr(0, basic.length - 1);  
basic = basic.substring(0, basic.lastIndexOf(&#39;,&#39;));  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>替换字符串</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>str.replace(&quot;需要替换的字符串&quot;，&quot;新字符串&quot;)　

str.replace(/需要替换的字符串/g，&quot;新字符串&quot;)

比如：

&quot;yyyy-MM-dd-hh-mm-ss&quot;.replace(&quot;-&quot;,&quot;/&quot;)

结果如下： &quot;yyyy/MM-dd-hh-mm-ss&quot;

&quot;yyyy-MM-dd-hh-mm-ss&quot;.replace(/-/g,&quot;/&quot;)

结果如下：
&quot;yyyy/MM/dd/hh/mm/ss&quot;

过滤字符：
str.replace(/[a-zA-Z0-9]/g,&quot;&quot;)

综上：

常规的替换只会替换第一次匹配的字符，正则可替换全部
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组：</h3><p>arr.length 获取长度</p><p>arr.slice(0,3) 截取0到第三个元素</p><p>arr.push 添加元素 arr.pop 删除元素</p><p>arr.reserve 倒序元素</p><p>arr.concat() 连接两个数组</p><p>定义数组 var arr2 = new Array(2);//规定了数组的长度为2，不传2可看作切片</p><p>从索引2开始删除3个元素,然后再添加两个元素:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Microsoft&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Yahoo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AOL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Excite&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Oracle&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Google&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Facebook&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 返回删除的元素 [&#39;Yahoo&#39;, &#39;AOL&#39;, &#39;Excite&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>join()添加连接元素</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;A-B-C-1-2-3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>查找数组是否存在元素</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if(arr.indexOf(index)&gt;-1){}  // 没有返回-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>map和set</p></li></ul><p>var m = new Map(); // 空Map</p><p>m.set(&#39;Adam&#39;, 67); // 添加新的key-value</p><p>map()每个元素都调用一次</p><p>格式：arr.map(pow)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var array1 = [1,4,9,16];
const map1 = array1.map(x =&gt; x *2); // 里面是个回调函数
console.log(map1);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>reduce</li></ul><p>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><p>[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

打印结果：
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span>
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span>
<span class="token number">6</span> <span class="token number">4</span> <span class="token number">3</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token number">10</span> <span class="token comment">// 从第二个元素开始遍历</span>


<span class="token keyword">var</span>  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span>
<span class="token punctuation">}</span>，<span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//注意这里设置了初始值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

打印结果：
<span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span>
<span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span>
<span class="token number">6</span> <span class="token number">4</span> <span class="token number">3</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token number">10</span> <span class="token comment">// 从第一个元素开始遍历</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),g={href:"https://www.jianshu.com/p/e375ba1cfc47",target:"_blank",rel:"noopener noreferrer"},x=t(`<ul><li>filter</li></ul><p>筛选元素 加上indexOf去除重复元素</p><p>将原数组筛选，获得新数组</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>this.delArr = this.delArr.filter(function (item) {
    return item != index
  }) // lia
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>trim</li></ul><p>x.trim()去除首尾空格</p><ul><li>sort</li></ul><p>x.sort() 不传参数默认ASCII升序 传函数 a&lt;b,返回-1，位置a在b前面; a&gt;b,返回1，a在b后面；返回0，位置不变。</p>`,8),f={href:"https://blog.csdn.net/ws9029/article/details/106734256",target:"_blank",rel:"noopener noreferrer"},_=t('<ul><li><p>from</p><p>Array.from(obj,methods) 将数组浅拷贝，后面可加方法，使obj里的每一个元素都执行该方法</p></li><li><p>map</p><p>对原数组遍历改造，得到操作后的原数组</p></li><li><p>some</p><p>数组中有至少一个元素通过回调函数的测试就会返回**<code>true</code>**；所有元素都没有通过回调函数的测试返回值才会为false。</p></li></ul><h4 id="数组去重" tabindex="-1"><a class="header-anchor" href="#数组去重" aria-hidden="true">#</a> 数组去重</h4>',2),w={href:"https://www.cnblogs.com/zsp-1064239893/p/11196501.html",target:"_blank",rel:"noopener noreferrer"},y=t(`<h4 id="表达式学习" tabindex="-1"><a class="header-anchor" href="#表达式学习" aria-hidden="true">#</a> 表达式学习</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>state<span class="token punctuation">.</span>allAnswers<span class="token punctuation">.</span>User_Flight_City <span class="token operator">!==</span> <span class="token string">&quot;&quot;</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>app<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>state<span class="token punctuation">.</span>Flight_Master<span class="token operator">?.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> v<span class="token punctuation">.</span>Dept_City <span class="token operator">===</span> app<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>state<span class="token punctuation">.</span>allAnswers<span class="token punctuation">.</span>User_Flight_City <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">.</span>Cancel_LR <span class="token operator">==</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">label</span><span class="token operator">:</span> x<span class="token punctuation">.</span>Flight_No <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>Arrv_City<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>Quar_City <span class="token operator">?</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>Quar_City <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> x<span class="token punctuation">.</span>Flight_No
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>cur<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> item<span class="token punctuation">.</span>label <span class="token operator">===</span> cur<span class="token punctuation">.</span>label
    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">?</span> pre <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;我的航班未被列出&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;我的航班未被列出&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;我的航班未被列出&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;我的航班未被列出&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组判断相等" tabindex="-1"><a class="header-anchor" href="#数组判断相等" aria-hidden="true">#</a> 数组判断相等</h4><p>一般先转化为字符串判断</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>arr.toString()
arr.join()
arr + &quot;&quot;
String(arr)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象：</h3><h4 id="generator" tabindex="-1"><a class="header-anchor" href="#generator" aria-hidden="true">#</a> generator</h4><p>generator可保存对象状态 可以用yield返回多次</p><h4 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test</h4><p>RegExp对象的test()方法用于测试给定的字符串是否符合条件。</p><h4 id="json-parse" tabindex="-1"><a class="header-anchor" href="#json-parse" aria-hidden="true">#</a> JSON.parse</h4><p>var user =JSON.parse(this.responseText); 将变量转化为对象，以便读取里边数组</p><h4 id="对象转数组" tabindex="-1"><a class="header-anchor" href="#对象转数组" aria-hidden="true">#</a> 对象转数组</h4>`,13),q={href:"https://www.jianshu.com/p/3d823b9d632b",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>data <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> 
data <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象遍历" tabindex="-1"><a class="header-anchor" href="#对象遍历" aria-hidden="true">#</a> 对象遍历</h4>`,2),A={href:"https://www.cnblogs.com/chenyablog/p/6477866.html",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象转字符串" tabindex="-1"><a class="header-anchor" href="#对象转字符串" aria-hidden="true">#</a> 对象转字符串</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JSON.stringify(object) // 或者json封装
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="判定对象是否为空" tabindex="-1"><a class="header-anchor" href="#判定对象是否为空" aria-hidden="true">#</a> 判定对象是否为空</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>JSON.stringify(option)==&quot;{}&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="删除对象某属性" tabindex="-1"><a class="header-anchor" href="#删除对象某属性" aria-hidden="true">#</a> 删除对象某属性</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>delete this.checkBox[v.TripId]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="判断属性是否存在" tabindex="-1"><a class="header-anchor" href="#判断属性是否存在" aria-hidden="true">#</a> 判断属性是否存在</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if(&quot;name&quot; in obj)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典：</h3>`,10),M={href:"https://blog.csdn.net/ganyingxie123456/article/details/78163154",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.cnblogs.com/yuer20180726/p/11387699.html",target:"_blank",rel:"noopener noreferrer"},N=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空Map</span>
m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Adam&#39;</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加新的key-value</span>
m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
m<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;Adam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在key &#39;Adam&#39;: true</span>
m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Adam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 67</span>
m<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;Adam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除key &#39;Adam&#39;</span>
m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Adam&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式：</h3>`,2),S={href:"https://www.runoob.com/regexp/regexp-syntax.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<ul><li>?表示懒惰模式，即匹配一次成功后就截止，默认是非懒惰，即匹配成功后仍继续匹配，直到末尾。</li></ul><ul><li>+表示可以多匹配一个任意字符，</li><li>.点则匹配除“\\n”和&quot;\\r&quot;之外的任何单个字符，</li><li>*匹配前面的子表达式任意次，\\转义字符</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/\\{\\{(.*?)\\}\\}/   表示匹配{{msg}}之类，.任意字符 *匹配任意次 ?匹配成功后即停止
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>onblur 事件发生在对象失去焦点时。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="定时函数" tabindex="-1"><a class="header-anchor" href="#定时函数" aria-hidden="true">#</a> 定时函数：</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>setInterval(function(){ alert(&quot;Hello&quot;); }, 3000);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> math：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> 返回x的最大整数

math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>随机产生<span class="token number">1</span>到<span class="token number">10</span>的随机数

Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">230</span><span class="token punctuation">)</span>  取整
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跳转" tabindex="-1"><a class="header-anchor" href="#跳转" aria-hidden="true">#</a> 跳转:</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">&quot;./pcIndex&quot;</span><span class="token punctuation">;</span>
location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载当前网页</span>
<span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;../login/pcExit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="双问号-空值合并运算符" tabindex="-1"><a class="header-anchor" href="#双问号-空值合并运算符" aria-hidden="true">#</a> 双问号（空值合并运算符）</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 括号里面内容为空，则默认Guest
let firstName = null;
let lastName = undefined;
let username = (firstName || lastName) ?? &quot;Guest&quot;; // Error: Unexpected token &#39;??&#39;

console.log(username); // &quot;Guest&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能：</h2><h3 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换" aria-hidden="true">#</a> 格式转换</h3>`,15),O={href:"http://c.biancheng.net/view/5477.html",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int.toString()
parseInt(str)
arr.toString() // 数组转字符串
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h3>`,2),E={href:"https://www.cnblogs.com/PowellZhao/p/5542169.html",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://www.runoob.com/js/js-type-conversion.html",target:"_blank",rel:"noopener noreferrer"},z=n("h3",{id:"判断数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#判断数据类型","aria-hidden":"true"},"#"),a(" 判断数据类型")],-1),L={href:"https://www.cnblogs.com/onepixel/p/5126046.html",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>typeof num == int
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="a标签跳转网页刷新时如何储存数据" tabindex="-1"><a class="header-anchor" href="#a标签跳转网页刷新时如何储存数据" aria-hidden="true">#</a> a标签跳转网页刷新时如何储存数据</h3>`,2),F={href:"https://blog.csdn.net/julystroy/article/details/96493615",target:"_blank",rel:"noopener noreferrer"},H=t('<h3 id="cookie-用于存储-web-页面的用户信息" tabindex="-1"><a class="header-anchor" href="#cookie-用于存储-web-页面的用户信息" aria-hidden="true">#</a> Cookie 用于存储 web 页面的用户信息</h3><h3 id="js中改变style样式" tabindex="-1"><a class="header-anchor" href="#js中改变style样式" aria-hidden="true">#</a> js中改变style样式</h3><p>allDoms[i].style.cssText=&quot;display:block;&quot;; allDoms[i] 可更换</p><h3 id="获取滚轮高度" tabindex="-1"><a class="header-anchor" href="#获取滚轮高度" aria-hidden="true">#</a> 获取滚轮高度</h3><p>document.documentElement.scrollTop</p><h3 id="获取span标签内容" tabindex="-1"><a class="header-anchor" href="#获取span标签内容" aria-hidden="true">#</a> 获取span标签内容</h3><p>document.getElementById(&quot;code&quot;).innerText</p><h3 id="添加点击事件" tabindex="-1"><a class="header-anchor" href="#添加点击事件" aria-hidden="true">#</a> 添加点击事件</h3><p>document.getElementById(&#39;text&#39;).addEventListener(&quot;click&quot;, get);</p><p>可用来代替onclik,get是一个函数</p><h3 id="改变html" tabindex="-1"><a class="header-anchor" href="#改变html" aria-hidden="true">#</a> 改变html</h3>',11),J=n("p",{变量:""},[a("加引号说明要生成html文本，并用.innerhtml="),n("code",null,"内容"),a("可实现HTML 新增面板，内容中加入js变量 $")],-1),G=n("h3",{id:"根据日期判断星期几",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#根据日期判断星期几","aria-hidden":"true"},"#"),a(" 根据日期判断星期几")],-1),Z={href:"https://www.cnblogs.com/home-/p/12093809.html",target:"_blank",rel:"noopener noreferrer"},U=n("h3",{id:"时间函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#时间函数","aria-hidden":"true"},"#"),a(" 时间函数")],-1),V={href:"https://www.cnblogs.com/ShanHeDiao/p/4445012.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://www.html.cn/qa/javascript/11162.html",target:"_blank",rel:"noopener noreferrer"},R=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var d = new Date();
var year = d.getFullYear();
var mouth = d.getMonth() + 1;
var day = d.getDate();
var hour = d.getHours();
var minute = d.getMinutes();

var h3 = hour + &quot;:&quot; + minute;
var p = year + &quot;-&quot; + mouth + &quot;-&quot; + day;
$(&quot;#now_time h3&quot;).val(h3);
$(&quot;#now_time p&quot;).val(p);
console.log(h3, p);

this.startDate=time.toLocaleDateString()
this.endDate=time.toLocaleTimeString()
console.log(this.startDate,this.endDate);
// 结果 2021/12/9 下午6:04:31

// 或者用插件
npm install moment --save
moment().format(&#39;YYYY-MM-DD&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// YYYY-mm-DD日期
let time = new Date()
let day = time.toLocaleDateString()
this.date = day.replace(/\\//g, &quot;-&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// HH:mm时间
var d = new Date(), str = &quot;&quot;
str += d.getHours() + &#39;:&#39;;
str += d.getMinutes();
this.clock = str
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="根据时间戳获取年龄" tabindex="-1"><a class="header-anchor" href="#根据时间戳获取年龄" aria-hidden="true">#</a> 根据时间戳获取年龄</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export function getAge(birthTime) {
  var birthDate=new Date(birthTime).getTime()
  var nowDate=new Date().getTime()
  var age=Math.ceil((nowDate-birthDate)/31536000000)
  console.log(age)
  return age
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组对象的某一字段去重" tabindex="-1"><a class="header-anchor" href="#数组对象的某一字段去重" aria-hidden="true">#</a> 数组对象的某一字段去重</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>app.dataset.state.Flight_Master?.filter((v) =&gt; {
    return v.Country === app.dataset.state.allAnswers.User_Flight_Country
})?.map(x =&gt; {
    return x.Dept_City
})?.filter((y, k, arr) =&gt; {
    return arr.indexOf(y) === k
})?.map(res =&gt; {
    return {
        label: res,
        value: res
    }
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异步变同步解决方法" tabindex="-1"><a class="header-anchor" href="#异步变同步解决方法" aria-hidden="true">#</a> 异步变同步解决方法</h3>`,8),P={href:"https://zhuanlan.zhihu.com/p/392148949",target:"_blank",rel:"noopener noreferrer"},Q=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>利用递归和在promise中使用settimeout，可一直轮询
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="可恨的bug" tabindex="-1"><a class="header-anchor" href="#可恨的bug" aria-hidden="true">#</a> 可恨的bug:</h2><ul><li><h3 id="问题-js改变classname属性效果显示错误-如下图" tabindex="-1"><a class="header-anchor" href="#问题-js改变classname属性效果显示错误-如下图" aria-hidden="true">#</a> 问题：js改变className属性效果显示错误，如下图</h3></li></ul><img src="`+c+'" alt="image-20210524205308219" style="zoom:25%;"><p>原因：渲染时间不够，造成数据流失，要加setInterval()延迟函数给浏览器加载</p>',5),W={id:"input-赋值不成功问题",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#input-赋值不成功问题","aria-hidden":"true"},"#",-1),K={href:"https://blog.csdn.net/weixin_41297324/article/details/107941929",target:"_blank",rel:"noopener noreferrer"},nn={id:"childnode空节点",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#childnode空节点","aria-hidden":"true"},"#",-1),sn={href:"https://www.cnblogs.com/zhangbao/p/5881769.html",target:"_blank",rel:"noopener noreferrer"},en=t(`<p>ChildNode[i].value 赋值了不显示问题，childNode会把空格当作一节点，所以赋值了也显示不了，因为赋值在空格</p><ul><li><h3 id="点击事件不响应" tabindex="-1"><a class="header-anchor" href="#点击事件不响应" aria-hidden="true">#</a> 点击事件不响应</h3></li></ul><p>原因：可能函数名为某些关键字不得使用，如命名为scroll的函数点击无法生效，需更换名称</p><h3 id="js内容不响应" tabindex="-1"><a class="header-anchor" href="#js内容不响应" aria-hidden="true">#</a> js内容不响应</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>可能节点未渲染，js获取失败，常见
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="定义事件a-但onclick报错方法未定义" tabindex="-1"><a class="header-anchor" href="#定义事件a-但onclick报错方法未定义" aria-hidden="true">#</a> 定义事件a，但onclick报错方法未定义</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>使用window.a=function(){},全局定义
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数组或对象为-ob-属性无法遍历" tabindex="-1"><a class="header-anchor" href="#数组或对象为-ob-属性无法遍历" aria-hidden="true">#</a> 数组或对象为__ob__属性无法遍历</h3>`,8),tn={href:"https://blog.csdn.net/qq_42527726/article/details/108491401",target:"_blank",rel:"noopener noreferrer"},pn=t(`<h3 id="使用async函数返回值为空" tabindex="-1"><a class="header-anchor" href="#使用async函数返回值为空" aria-hidden="true">#</a> 使用async函数返回值为空</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>由于用了await，故结果未赋值给变量前就return了，所以返回值为空
要在调用async函数后使用.then(res=&gt;{})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="websocket-无法连接0-0-0-0" tabindex="-1"><a class="header-anchor" href="#websocket-无法连接0-0-0-0" aria-hidden="true">#</a> websocket 无法连接0.0.0.0</h3><p>本地服务器监听0.0.0.0:9000地址，postman可以连接，js的websocket却无法连接</p><p>0.0.0.0地址被用于表示一个无效的，未知的或者不可用的目标。</p><p>所以postman输入任意地址都能连接上，如0.0.0.0:9000 或 127.0.0.8:9000</p><p>而js的websocket对于0.0.0.0地址是非法的，无法连接的。其他地址和postman一致</p><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><h3 id="settimeout和setinterval会引发多线程安全问题吗" tabindex="-1"><a class="header-anchor" href="#settimeout和setinterval会引发多线程安全问题吗" aria-hidden="true">#</a> setTimeout和setInterval会引发多线程安全问题吗？</h3>`,9),on={href:"https://blog.csdn.net/fuhanghang/article/details/118516268",target:"_blank",rel:"noopener noreferrer"},ln=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>js其实是单线程的，setTimeout和setInterval只是一个事件触发器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意：</h2><ul><li><p>箭头函数 v=&gt;{v-1} ，加了{}则不能省略return</p></li><li><p>js放头部问题，会出现节点未加载完吗，而无法使用js,可以用延时函数</p></li><li><p>全局变量可以不用往函数传参数，但函数要有返回值</p></li><li><p>字面量创建方式特殊含义的字符不需要转义，实例创建方式需要转义</p></li><li><p>只要函数return 全局变量即可保存</p></li></ul>`,3);function cn(rn,un){const s=l("ExternalLinkIcon");return p(),o("div",null,[u,d,n("p",null,[n("a",v,[a("网址"),e(s)])]),h,m,n("p",null,[n("a",k,[a("闭包详解"),e(s)])]),b,n("p",null,[n("a",g,[a("详解"),e(s)])]),x,n("p",null,[n("a",f,[a("具体内部排序方法"),e(s)])]),_,n("p",null,[n("a",w,[a("网址"),e(s)])]),y,n("p",null,[n("a",q,[a("网址"),e(s)])]),j,n("p",null,[n("a",A,[a("网址"),e(s)])]),D,n("p",null,[n("a",M,[a("https://blog.csdn.net/ganyingxie123456/article/details/78163154"),e(s)])]),n("p",null,[n("a",C,[a("https://www.cnblogs.com/yuer20180726/p/11387699.html"),e(s)])]),N,n("p",null,[n("a",S,[a("学习"),e(s)])]),I,n("p",null,[n("a",O,[a("http://c.biancheng.net/view/5477.html"),e(s)])]),T,n("p",null,[n("a",E,[a("https://www.cnblogs.com/PowellZhao/p/5542169.html"),e(s)])]),n("p",null,[n("a",Y,[a("https://www.runoob.com/js/js-type-conversion.html"),e(s)])]),z,n("p",null,[n("a",L,[a("https://www.cnblogs.com/onepixel/p/5126046.html"),e(s)])]),B,n("p",null,[n("a",F,[a("可使用本地储存数据"),e(s)])]),H,J,G,n("p",null,[n("a",Z,[a("链接"),e(s)])]),U,n("p",null,[n("a",V,[a("https://www.cnblogs.com/ShanHeDiao/p/4445012.html"),e(s)])]),n("p",null,[n("a",$,[a("https://www.html.cn/qa/javascript/11162.html"),e(s)])]),R,n("p",null,[n("a",P,[a("网址"),e(s)])]),Q,n("ul",null,[n("li",null,[n("h3",W,[X,a(),n("a",K,[a("Input 赋值不成功问题"),e(s)])])]),n("li",null,[n("h3",nn,[an,a(),n("a",sn,[a("ChildNode空节点"),e(s)])])])]),en,n("p",null,[n("a",tn,[a("奇葩原因"),e(s)])]),pn,n("p",null,[n("a",on,[a("网址"),e(s)])]),ln])}const vn=i(r,[["render",cn],["__file","Js 笔记.html.vue"]]);export{vn as default};
