import{_ as g,W as t,X as n,Y as a,Z as i,a0 as r,a2 as s,C as c}from"./framework-5d92cd28.js";const d="/assets/image-20221222103938371-d3a1c919.png",p="/assets/image-20230102211444328-f154c87a.png",o="/assets/image-20221222104259884-8be7c707.png",f="/assets/image-20221222104431667-87e2fbc2.png",m="/assets/image-20230102205552486-42981b82.png",h="/assets/image-20221222110928106-42b7ece3.png",l="/assets/image-20221222111131343-3ce08957.png",u="/assets/image-20230102210838263-970019a5.png",b="/assets/image-20221222211805607-b692465a.png",x="/assets/image-20221223094619549-5771967e.png",_="/assets/image-20221227173653085-2c164c04.png",z="/assets/image-20221228100935382-d49f59b0.png",y="/assets/image-20221226104211402-dd28fe6e.png",v="/assets/image-20221226104430811-9afbe471.png",S="/assets/image-20221228102104860-006c2f70.png",j="/assets/image-20230102205958060-0438c955.png",w="/assets/image-20221222105410756-20c62f91.png",B="/assets/image-20230104212818607-ba9b2ab7.png",I="/assets/image-20230104212900787-ccba8de0.png",P="/assets/image-20230104213538930-9d022f54.png",C="/assets/image-20230104214106302-92bf07de.png",k="/assets/image-20230104214506299-e7390111.png",V="/assets/image-20230104214646892-2e8e2d71.png",N="/assets/image-20230104214814543-0f7c2b54.png",D="/assets/image-20230104215235661-e82f7c42.png",E="/assets/image-20230105103856011-f88fec2a.png",q="/assets/image-20221226105737711-a5f9cb27.png",F="/assets/image-20230102215921519-e99c419b.png",H="/assets/image-20230102214037246-622f590f.png",L="/assets/image-20230102215108350-405a3939.png",G="/assets/image-20230102215631863-1a8fac61.png",K="/assets/image-20230102220529571-1ffa5ef1.png",R="/assets/image-20230102220629000-21b39fbe.png",T="/assets/image-20230104212451645-2cc524fd.png",U="/assets/image-20230112204852992-3caf822e.png",W="/assets/image-20230112205012220-582fd2c0.png",X="/assets/image-20230112205247897-afd64e84.png",Y="/assets/image-20230115202251589-a2c88909.png",Z="/assets/image-20230115202258514-cac77dae.png",A="/assets/image-20230115202425667-7774385c.png",J="/assets/image-20230115202825569-d75bea56.png",M="/assets/image-20221227165114235-1b207ad7.png",O="/assets/image-20221227203818959-4bee388c.png",Q="/assets/image-20230102210430571-36c71e12.png",$={},aa=a("h2",{id:"学习",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#学习","aria-hidden":"true"},"#"),i(" 学习")],-1),ia={href:"https://www.bilibili.com/video/BV1Rs411c7HG/?spm_id_from=333.337.search-card.all.click&vd_source=3ec975651088fba288a277c53f0bcc77",target:"_blank",rel:"noopener noreferrer"},ea=s('<h2 id="知识" tabindex="-1"><a class="header-anchor" href="#知识" aria-hidden="true">#</a> 知识</h2><h3 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu" aria-hidden="true">#</a> cpu</h3><figure><img src="'+d+'" alt="image-20221222103938371" tabindex="0" loading="lazy"><figcaption>image-20221222103938371</figcaption></figure><h4 id="与内存" tabindex="-1"><a class="header-anchor" href="#与内存" aria-hidden="true">#</a> 与内存</h4><p>cpu与内存通过三个总线进行交流，为地址线，数据线，控制线。</p><p>首先经过地址线指明要操作的位置，然后通过控制线执行具体的操作，再将结果通过数据线传入或传回</p><h5 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理" aria-hidden="true">#</a> 工作原理</h5><p>cs,ip指向的地址代表指令，ds,bx指向的地址代表数据</p><p>cpu先根据cs,ip合成地址，然后通过地址总线找到对应地址，读取出一个字，如8B07，然后通过数据总线写入cpu,cpu识别8B07,发现是指令mov ax,[bx]，于是放入指令缓冲寄存器，之后根据指令将ds:[bx]这个地址的数据放入ax寄存器中，完成了cpu运算，最后继续读取cs,ip。</p><figure><img src="'+p+'" alt="image-20230102211444328" tabindex="0" loading="lazy"><figcaption>image-20230102211444328</figcaption></figure><h4 id="寄存器" tabindex="-1"><a class="header-anchor" href="#寄存器" aria-hidden="true">#</a> 寄存器</h4><p>16位，存放两个字节</p><figure><img src="'+o+'" alt="image-20221222104259884" tabindex="0" loading="lazy"><figcaption>image-20221222104259884</figcaption></figure><figure><img src="'+f+'" alt="image-20221222104431667" tabindex="0" loading="lazy"><figcaption>image-20221222104431667</figcaption></figure><figure><img src="'+m+'" alt="image-20230102205552486" tabindex="0" loading="lazy"><figcaption>image-20230102205552486</figcaption></figure><h4 id="寻址" tabindex="-1"><a class="header-anchor" href="#寻址" aria-hidden="true">#</a> 寻址</h4><p>要先将段地址*16才加上偏移地址，一个段由于只有16位地址，因此最大为64KB</p><figure><img src="'+h+'" alt="image-20221222110928106" tabindex="0" loading="lazy"><figcaption>image-20221222110928106</figcaption></figure><figure><img src="'+l+'" alt="image-20221222111131343" tabindex="0" loading="lazy"><figcaption>image-20221222111131343</figcaption></figure><figure><img src="'+u+'" alt="image-20230102210838263" tabindex="0" loading="lazy"><figcaption>image-20230102210838263</figcaption></figure><h4 id="ax" tabindex="-1"><a class="header-anchor" href="#ax" aria-hidden="true">#</a> ax...</h4><p>ax,通用寄存器，可存放数据</p><p>ah,al,分别是ax的高低位，如ax=3344h,ah=33h，al=44h</p><p>bx,存放段地址的偏移量</p><p>cx,存放循环次数</p><p>dx,通用寄存器</p><p>dh,hl,分别是ax的高低位,各为8位储存1个字节</p><h4 id="cs-ip" tabindex="-1"><a class="header-anchor" href="#cs-ip" aria-hidden="true">#</a> CS,IP</h4><p>代码段寄存器</p><p>CPU只认被CS:IP指向的内存单元的内容为指令</p><p>CS寄存器储存段地址，IP寄存器储存偏移地址</p><figure><img src="'+b+'" alt="image-20221222211805607" tabindex="0" loading="lazy"><figcaption>image-20221222211805607</figcaption></figure><h4 id="ds-bx" tabindex="-1"><a class="header-anchor" href="#ds-bx" aria-hidden="true">#</a> DS,[bx]</h4><p>DS 数据段寄存器</p><p>[0]为内存单元，bx为偏移量寄存器</p><figure><img src="'+x+'" alt="image-20221223094619549" tabindex="0" loading="lazy"><figcaption>image-20221223094619549</figcaption></figure><figure><img src="'+_+'" alt="image-20221227173653085" tabindex="0" loading="lazy"><figcaption>image-20221227173653085</figcaption></figure><figure><img src="'+z+'" alt="image-20221228100935382" tabindex="0" loading="lazy"><figcaption>image-20221228100935382</figcaption></figure><h4 id="ss-sp" tabindex="-1"><a class="header-anchor" href="#ss-sp" aria-hidden="true">#</a> SS,SP</h4><p>堆栈段寄存器</p><p>负责储存栈地址信息，也是段寄存器，必须通过寄存器来传输数据</p><figure><img src="'+y+'" alt="image-20221226104211402" tabindex="0" loading="lazy"><figcaption>image-20221226104211402</figcaption></figure><p>push时先将SP减2</p><figure><img src="'+v+'" alt="image-20221226104430811" tabindex="0" loading="lazy"><figcaption>image-20221226104430811</figcaption></figure><h4 id="si-di" tabindex="-1"><a class="header-anchor" href="#si-di" aria-hidden="true">#</a> SI,DI</h4><p>与bx功能相近</p><figure><img src="'+S+'" alt="image-20221228102104860" tabindex="0" loading="lazy"><figcaption>image-20221228102104860</figcaption></figure><h4 id="bp" tabindex="-1"><a class="header-anchor" href="#bp" aria-hidden="true">#</a> BP</h4><figure><img src="'+j+'" alt="image-20230102205958060" tabindex="0" loading="lazy"><figcaption>image-20230102205958060</figcaption></figure><h3 id="汇编指令" tabindex="-1"><a class="header-anchor" href="#汇编指令" aria-hidden="true">#</a> 汇编指令</h3><h4 id="mov" tabindex="-1"><a class="header-anchor" href="#mov" aria-hidden="true">#</a> mov</h4><p>相当=</p><p>汇编指令往往是一个族。比如mov指令，有movq，movl 等,movq作用是mov4个字节.</p><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add</h4><p>相当+=</p><h4 id="sub" tabindex="-1"><a class="header-anchor" href="#sub" aria-hidden="true">#</a> sub</h4><p>相当-=</p><h4 id="jmp" tabindex="-1"><a class="header-anchor" href="#jmp" aria-hidden="true">#</a> jmp</h4><p>jmp 1000:3 跳转到1003H的地址，相当于CS指向1000，IP指向3</p><figure><img src="'+w+'" alt="image-20221222105410756" tabindex="0" loading="lazy"><figcaption>image-20221222105410756</figcaption></figure><p>jmp short s</p><figure><img src="'+B+'" alt="image-20230104212818607" tabindex="0" loading="lazy"><figcaption>image-20230104212818607</figcaption></figure><figure><img src="'+I+'" alt="image-20230104212900787" tabindex="0" loading="lazy"><figcaption>image-20230104212900787</figcaption></figure><figure><img src="'+P+'" alt="image-20230104213538930" tabindex="0" loading="lazy"><figcaption>image-20230104213538930</figcaption></figure><p>jmp near ptr s</p><figure><img src="'+C+'" alt="image-20230104214106302" tabindex="0" loading="lazy"><figcaption>image-20230104214106302</figcaption></figure><p>jmp far ptr s</p><figure><img src="'+k+'" alt="image-20230104214506299" tabindex="0" loading="lazy"><figcaption>image-20230104214506299</figcaption></figure><p>通过内存转移</p><figure><img src="'+V+'" alt="image-20230104214646892" tabindex="0" loading="lazy"><figcaption>image-20230104214646892</figcaption></figure><figure><img src="'+N+'" alt="image-20230104214814543" tabindex="0" loading="lazy"><figcaption>image-20230104214814543</figcaption></figure><figure><img src="'+D+'" alt="image-20230104215235661" tabindex="0" loading="lazy"><figcaption>image-20230104215235661</figcaption></figure><h4 id="jcxz" tabindex="-1"><a class="header-anchor" href="#jcxz" aria-hidden="true">#</a> jcxz</h4><p>如果cx == 0,则短转移跳转</p><figure><img src="'+E+'" alt="image-20230105103856011" tabindex="0" loading="lazy"><figcaption>image-20230105103856011</figcaption></figure><h4 id="push-pop" tabindex="-1"><a class="header-anchor" href="#push-pop" aria-hidden="true">#</a> push,pop</h4><p>将寄存器中数据出入栈</p><figure><img src="'+q+'" alt="image-20221226105737711" tabindex="0" loading="lazy"><figcaption>image-20221226105737711</figcaption></figure><h4 id="inc" tabindex="-1"><a class="header-anchor" href="#inc" aria-hidden="true">#</a> inc</h4><p>inc bx 相当于bx++</p><h4 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> loop</h4><p>loop s 跳转到s标签，使用cx来规定循环次数</p><h4 id="dw" tabindex="-1"><a class="header-anchor" href="#dw" aria-hidden="true">#</a> dw</h4><p>dw 0123h,0456h 定义一些字</p><p>由于开始时bx为0，故0123h储存在偏移量为0的地址上，且占据了一个字的空间，于是0456h储存在2的地址上</p><h4 id="and" tabindex="-1"><a class="header-anchor" href="#and" aria-hidden="true">#</a> and</h4><p>and 与指令</p><p>如</p><p>mov ax, 0101</p><p>and ax,0110 ; ax与0110</p><p>则ax=0100</p><h4 id="or" tabindex="-1"><a class="header-anchor" href="#or" aria-hidden="true">#</a> or</h4><p>或指令</p><p>or ax,1010</p><h4 id="db" tabindex="-1"><a class="header-anchor" href="#db" aria-hidden="true">#</a> db</h4><p>定义字符串（定义类都是伪指令）</p><p>db &#39;hello&#39;</p><h4 id="dd" tabindex="-1"><a class="header-anchor" href="#dd" aria-hidden="true">#</a> dd</h4><p>double word 定义32位数据，占两个字</p><figure><img src="'+F+'" alt="image-20230102215921519" tabindex="0" loading="lazy"><figcaption>image-20230102215921519</figcaption></figure><h4 id="div" tabindex="-1"><a class="header-anchor" href="#div" aria-hidden="true">#</a> div</h4><figure><img src="'+H+'" alt="image-20230102214037246" tabindex="0" loading="lazy"><figcaption>image-20230102214037246</figcaption></figure><figure><img src="'+L+'" alt="image-20230102215108350" tabindex="0" loading="lazy"><figcaption>image-20230102215108350</figcaption></figure><figure><img src="'+G+'" alt="image-20230102215631863" tabindex="0" loading="lazy"><figcaption>image-20230102215631863</figcaption></figure><h4 id="dup" tabindex="-1"><a class="header-anchor" href="#dup" aria-hidden="true">#</a> dup</h4><figure><img src="'+K+'" alt="image-20230102220529571" tabindex="0" loading="lazy"><figcaption>image-20230102220529571</figcaption></figure><figure><img src="'+R+'" alt="image-20230102220629000" tabindex="0" loading="lazy"><figcaption>image-20230102220629000</figcaption></figure><h4 id="offset" tabindex="-1"><a class="header-anchor" href="#offset" aria-hidden="true">#</a> offset</h4><figure><img src="'+T+'" alt="image-20230104212451645" tabindex="0" loading="lazy"><figcaption>image-20230104212451645</figcaption></figure><h4 id="ret-retf" tabindex="-1"><a class="header-anchor" href="#ret-retf" aria-hidden="true">#</a> ret,retf</h4><p>读取栈的数据赋值到cs,ip中</p><figure><img src="'+U+'" alt="image-20230112204852992" tabindex="0" loading="lazy"><figcaption>image-20230112204852992</figcaption></figure><figure><img src="'+W+'" alt="image-20230112205012220" tabindex="0" loading="lazy"><figcaption>image-20230112205012220</figcaption></figure><h4 id="call" tabindex="-1"><a class="header-anchor" href="#call" aria-hidden="true">#</a> call</h4><p>将cs,ip的值入栈</p><figure><img src="'+X+'" alt="image-20230112205247897" tabindex="0" loading="lazy"><figcaption>image-20230112205247897</figcaption></figure><p>call far ptr</p><figure><img src="'+Y+'" alt="image-20230115202251589" tabindex="0" loading="lazy"><figcaption>image-20230115202251589</figcaption></figure><figure><img src="'+Z+'" alt="image-20230115202258514" tabindex="0" loading="lazy"><figcaption>image-20230115202258514</figcaption></figure><figure><img src="'+A+'" alt="image-20230115202425667" tabindex="0" loading="lazy"><figcaption>image-20230115202425667</figcaption></figure><figure><img src="'+J+'" alt="image-20230115202825569" tabindex="0" loading="lazy"><figcaption>image-20230115202825569</figcaption></figure><h3 id="安全空间" tabindex="-1"><a class="header-anchor" href="#安全空间" aria-hidden="true">#</a> 安全空间</h3><p>0:200 - 0:2FF</p><figure><img src="'+M+'" alt="image-20221227165114235" tabindex="0" loading="lazy"><figcaption>image-20221227165114235</figcaption></figure><h3 id="字符数据" tabindex="-1"><a class="header-anchor" href="#字符数据" aria-hidden="true">#</a> 字符数据</h3><figure><img src="'+O+'" alt="image-20221227203818959" tabindex="0" loading="lazy"><figcaption>image-20221227203818959</figcaption></figure><h3 id="数据位置" tabindex="-1"><a class="header-anchor" href="#数据位置" aria-hidden="true">#</a> 数据位置</h3><figure><img src="'+Q+'" alt="image-20230102210430571" tabindex="0" loading="lazy"><figcaption>image-20230102210430571</figcaption></figure><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>汇编中数据不能以字母开头，必须前置0</p>',130);function ga(ta,na){const e=c("ExternalLinkIcon");return t(),n("div",null,[aa,a("p",null,[a("a",ia,[i("网址"),r(e)])]),ea])}const sa=g($,[["render",ga],["__file","汇编语言.html.vue"]]);export{sa as default};
