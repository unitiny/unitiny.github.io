import{_ as a,W as i,X as e,a2 as g}from"./framework-5d92cd28.js";const n="/assets/image-20220913154716811-b94314c3.png",t="/assets/image-20220913154755606-6777ae2b.png",r="/assets/image-20220913154826091-f1090e98.png",s="/assets/image-20220913154948753-d45b630b.png",d="/assets/image-20220913155101168-8156fe43.png",o="/assets/image-20220913155147662-59a9bddd.png",c="/assets/image-20220913155345394-f6719838.png",m="/assets/image-20220913163640440-545d6c9a.png",p="/assets/image-20220913163829462-97aa8339.png",f="/assets/image-20220913164002970-25a8bd64.png",l="/assets/image-20220913164210103-a4dabd64.png",h="/assets/image-20220913193327155-0d17339d.png",u="/assets/image-20220913195645716-1c3b648f.png",b="/assets/image-20220913195947054-3f52291c.png",_="/assets/image-20220913200401487-a7240dc6.png",x="/assets/image-20220913200907743-3567252d.png",y="/assets/image-20220913201438678-95645dfa.png",z="/assets/image-20220913201831023-c8b3c445.png",q="/assets/image-20220913202645471-28f4bb56.png",v="/assets/image-20220913202609654-23c69900.png",B="/assets/image-20220913203230599-3a50553a.png",M="/assets/image-20220913203541407-07aeb07c.png",A="/assets/image-20220913203743134-727a4de8.png",k="/assets/image-20220915085410348-a446cc44.png",S="/assets/image-20220915090200922-6cdff724.png",D="/assets/image-20220915091024172-e95b22b7.png",I="/assets/image-20220915091135523-3f5c194d.png",L="/assets/image-20220915161037677-40dbb035.png",Q="/assets/image-20220915161242961-c68cb274.png",w="/assets/image-20220915165247697-c13ac451.png",T="/assets/image-20220915170230320-17716d72.png",N="/assets/image-20220915170748934-3ac565e3.png",O="/assets/image-20220915171157330-87526cc7.png",C="/assets/image-20220915171314698-b4eef50f.png",H="/assets/image-20220915172102929-a5527a19.png",V="/assets/image-20220915173016946-585ab4a3.png",E="/assets/image-20220915173058302-640a841c.png",G="/assets/image-20220915192817195-fae964b1.png",K="/assets/image-20220915193744543-ec0fdf60.png",P="/assets/image-20220915194711728-2b31ac57.png",R="/assets/image-20220915195401528-363c3f2f.png",W="/assets/image-20220916094954309-1f01a088.png",X="/assets/image-20220916095116223-900d1ad3.png",Z="/assets/image-20220916095331530-ed6e3c52.png",j="/assets/image-20220916095715298-8c808c4c.png",F="/assets/image-20220916100110801-0a7746a0.png",J="/assets/image-20220916101041407-2abf7bf1.png",U="/assets/image-20220916101941012-8f55c709.png",Y="/assets/image-20220916101958540-74b6ef98.png",$="/assets/image-20220916102324630-9fb6eb8b.png",aa="/assets/image-20220916102524154-351700e4.png",ia="/assets/image-20220916102736158-12f9a96e.png",ea="/assets/image-20220916103305088-db7a2953.png",ga="/assets/image-20220916154032602-52f8a89b.png",na="/assets/image-20220916154504442-a391df26.png",ta="/assets/image-20221017155237565-29aff5b3.png",ra="/assets/image-20221017155418988-5d855589.png",sa="/assets/image-20220916154833024-1b8634aa.png",da="/assets/image-20220916155155396-30ec90f6.png",oa="/assets/image-20220916160647702-91bf20fc.png",ca="/assets/image-20220916160702011-9c917e2b.png",ma="/assets/image-20220916160717830-1c404f31.png",pa="/assets/image-20220916160737039-621faca5.png",fa="/assets/image-20220916160830012-4418cfa7.png",la="/assets/image-20220916161453209-1bdc9eec.png",ha="/assets/image-20220918145252061-d5a0474a.png",ua="/assets/image-20220918145441154-4eedd8e4.png",ba="/assets/image-20220918145415012-d777e4e9.png",_a="/assets/image-20220918150625608-257cec57.png",xa="/assets/image-20220918151459201-5324ac06.png",ya="/assets/image-20220918151613278-edcd0863.png",za="/assets/image-20220918152015858-584c2469.png",qa="/assets/image-20220918152112059-0083c351.png",va="/assets/image-20220918152559925-afc23de4.png",Ba="/assets/image-20220918153028190-34071728.png",Ma="/assets/image-20220918154342270-d741d679.png",Aa="/assets/image-20220918154417988-0c70c792.png",ka="/assets/image-20220918154509430-ff38d428.png",Sa="/assets/image-20220918154600105-03109627.png",Da="/assets/image-20220919094311828-5bf0d109.png",Ia="/assets/image-20220919094110389-183d6afe.png",La="/assets/image-20220919094251275-bf45ac93.png",Qa="/assets/image-20220919094449056-51514b19.png",wa="/assets/image-20220919094818216-30c55527.png",Ta="/assets/image-20220919094902829-dc310060.png",Na="/assets/image-20220920154308489-bbb5ba8a.png",Oa="/assets/image-20220920154601071-2eeabb0c.png",Ca="/assets/image-20220920160338876-61f96c30.png",Ha="/assets/image-20220920155424718-418389ee.png",Va="/assets/image-20220920155855406-c53acc44.png",Ea="/assets/image-20220920162731385-ee1e3658.png",Ga="/assets/image-20220920184535330-48778f8f.png",Ka="/assets/image-20220920185003371-d5d1564f.png",Pa="/assets/image-20220920185023324-e47cf18d.png",Ra="/assets/image-20220920190138279-83b7a94a.png",Wa="/assets/image-20220920190623243-0b78bdc2.png",Xa="/assets/image-20220920191217798-1959cb35.png",Za="/assets/image-20220922092425354-5e0af07b.png",ja="/assets/image-20220922092450776-91399218.png",Fa="/assets/image-20220922092619978-fac06768.png",Ja="/assets/image-20220922134825279-e6029636.png",Ua="/assets/image-20220922134859366-8e85b93c.png",Ya="/assets/image-20220922135020072-49ffb2d4.png",$a="/assets/image-20220922135104975-569c9041.png",ai="/assets/image-20220922135209835-859b28b1.png",ii="/assets/image-20220922140052080-104f1a99.png",ei="/assets/image-20220922144405327-d509d8a0.png",gi="/assets/image-20220922153937033-0f32a488.png",ni="/assets/image-20220922154128592-f0ffc4b9.png",ti="/assets/image-20220922154418110-9b9680e6.png",ri="/assets/image-20220922154613620-aa656ded.png",si="/assets/image-20220922155522694-13f9ac08.png",di="/assets/image-20220922155657065-a57d8343.png",oi="/assets/image-20220922165900083-dccbae5d.png",ci="/assets/image-20220922170525882-31f569d9.png",mi="/assets/image-20220915101546709-254b6ae0.png",pi="/assets/image-20220915101657248-2b3004a5.png",fi="/assets/image-20220915101754709-99592403.png",li="/assets/image-20220913162444897-990e8139.png",hi={},ui=g('<h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><h3 id="excel和mysql区别" tabindex="-1"><a class="header-anchor" href="#excel和mysql区别" aria-hidden="true">#</a> excel和mysql区别</h3><figure><img src="'+n+'" alt="image-20220913154716811" tabindex="0" loading="lazy"><figcaption>image-20220913154716811</figcaption></figure><figure><img src="'+t+'" alt="image-20220913154755606" tabindex="0" loading="lazy"><figcaption>image-20220913154755606</figcaption></figure><h3 id="经典架构" tabindex="-1"><a class="header-anchor" href="#经典架构" aria-hidden="true">#</a> 经典架构</h3><h4 id="分层架构" tabindex="-1"><a class="header-anchor" href="#分层架构" aria-hidden="true">#</a> 分层架构</h4><p>如MVC, docker, linux,前后端分离</p><figure><img src="'+r+'" alt="image-20220913154826091" tabindex="0" loading="lazy"><figcaption>image-20220913154826091</figcaption></figure><h4 id="事件驱动架构" tabindex="-1"><a class="header-anchor" href="#事件驱动架构" aria-hidden="true">#</a> 事件驱动架构</h4><p>消息中间件</p><figure><img src="'+s+'" alt="image-20220913154948753" tabindex="0" loading="lazy"><figcaption>image-20220913154948753</figcaption></figure><h4 id="管道-过滤器架构" tabindex="-1"><a class="header-anchor" href="#管道-过滤器架构" aria-hidden="true">#</a> 管道-过滤器架构</h4><p>流水线结构</p><figure><img src="'+d+'" alt="image-20220913155101168" tabindex="0" loading="lazy"><figcaption>image-20220913155101168</figcaption></figure><h4 id="微核架构" tabindex="-1"><a class="header-anchor" href="#微核架构" aria-hidden="true">#</a> 微核架构</h4><p>vscode，本身内核小，只满足基本功能，通过安装插件使功能丰富。</p><figure><img src="'+o+'" alt="image-20220913155147662" tabindex="0" loading="lazy"><figcaption>image-20220913155147662</figcaption></figure><h3 id="mysql软件架构" tabindex="-1"><a class="header-anchor" href="#mysql软件架构" aria-hidden="true">#</a> MySQL软件架构</h3><p>有管道-过滤器架构思想和微核架构思想</p><figure><img src="'+c+'" alt="image-20220913155345394" tabindex="0" loading="lazy"><figcaption>image-20220913155345394</figcaption></figure><h3 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> 存储引擎</h3><h4 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam" aria-hidden="true">#</a> MyISAM</h4><p>由于没有事务和log，功能少因此运行速度快，空间利用率高</p><figure><img src="'+m+'" alt="image-20220913163640440" tabindex="0" loading="lazy"><figcaption>image-20220913163640440</figcaption></figure><h4 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb" aria-hidden="true">#</a> InnoDB</h4><figure><img src="'+p+'" alt="image-20220913163829462" tabindex="0" loading="lazy"><figcaption>image-20220913163829462</figcaption></figure><h4 id="archive" tabindex="-1"><a class="header-anchor" href="#archive" aria-hidden="true">#</a> Archive</h4><figure><img src="'+f+'" alt="image-20220913164002970" tabindex="0" loading="lazy"><figcaption>image-20220913164002970</figcaption></figure><figure><img src="'+l+'" alt="image-20220913164210103" tabindex="0" loading="lazy"><figcaption>image-20220913164210103</figcaption></figure><h3 id="索引查找方法" tabindex="-1"><a class="header-anchor" href="#索引查找方法" aria-hidden="true">#</a> 索引查找方法</h3><figure><img src="'+h+'" alt="image-20220913193327155" tabindex="0" loading="lazy"><figcaption>image-20220913193327155</figcaption></figure><h4 id="b-tree" tabindex="-1"><a class="header-anchor" href="#b-tree" aria-hidden="true">#</a> B Tree</h4><p>对范围查找每次都得从根节点开始</p><figure><img src="'+u+'" alt="image-20220913195645716" tabindex="0" loading="lazy"><figcaption>image-20220913195645716</figcaption></figure><h4 id="b-tree-1" tabindex="-1"><a class="header-anchor" href="#b-tree-1" aria-hidden="true">#</a> B+ Tree</h4><p>范围查找更快速</p><figure><img src="'+b+'" alt="image-20220913195947054" tabindex="0" loading="lazy"><figcaption>image-20220913195947054</figcaption></figure><h3 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引" aria-hidden="true">#</a> 聚簇索引</h3><figure><img src="'+_+'" alt="image-20220913200401487" tabindex="0" loading="lazy"><figcaption>image-20220913200401487</figcaption></figure><figure><img src="'+x+'" alt="image-20220913200907743" tabindex="0" loading="lazy"><figcaption>image-20220913200907743</figcaption></figure><h3 id="辅助索引" tabindex="-1"><a class="header-anchor" href="#辅助索引" aria-hidden="true">#</a> 辅助索引</h3><p>依然是个B+树，不过叶子节点不记录数据，而是记录主键索引</p><figure><img src="'+y+'" alt="image-20220913201438678" tabindex="0" loading="lazy"><figcaption>image-20220913201438678</figcaption></figure><h3 id="innodb-1" tabindex="-1"><a class="header-anchor" href="#innodb-1" aria-hidden="true">#</a> InnoDB</h3><h4 id="逻辑存储结构" tabindex="-1"><a class="header-anchor" href="#逻辑存储结构" aria-hidden="true">#</a> 逻辑存储结构</h4><figure><img src="'+z+'" alt="image-20220913201831023" tabindex="0" loading="lazy"><figcaption>image-20220913201831023</figcaption></figure><figure><img src="'+q+'" alt="image-20220913202645471" tabindex="0" loading="lazy"><figcaption>image-20220913202645471</figcaption></figure><figure><img src="'+v+'" alt="image-20220913202609654" tabindex="0" loading="lazy"><figcaption>image-20220913202609654</figcaption></figure><h4 id="变长列" tabindex="-1"><a class="header-anchor" href="#变长列" aria-hidden="true">#</a> 变长列</h4><figure><img src="'+B+'" alt="image-20220913203230599" tabindex="0" loading="lazy"><figcaption>image-20220913203230599</figcaption></figure><h4 id="行溢出" tabindex="-1"><a class="header-anchor" href="#行溢出" aria-hidden="true">#</a> 行溢出</h4><figure><img src="'+M+'" alt="image-20220913203541407" tabindex="0" loading="lazy"><figcaption>image-20220913203541407</figcaption></figure><figure><img src="'+A+'" alt="image-20220913203743134" tabindex="0" loading="lazy"><figcaption>image-20220913203743134</figcaption></figure><h4 id="行记录格式" tabindex="-1"><a class="header-anchor" href="#行记录格式" aria-hidden="true">#</a> 行记录格式</h4><figure><img src="'+k+'" alt="image-20220915085410348" tabindex="0" loading="lazy"><figcaption>image-20220915085410348</figcaption></figure><p>变长字段长度表只记载变长列的偏移量，null标志位是用8位的bit记录某列是否为null，比记录在长度表中字符串更省空间。header记录一些需要的信息。数据溢出的列使用指针，数据存储在其他页里</p><figure><img src="'+S+'" alt="image-20220915090200922" tabindex="0" loading="lazy"><figcaption>image-20220915090200922</figcaption></figure><h3 id="左侧索引" tabindex="-1"><a class="header-anchor" href="#左侧索引" aria-hidden="true">#</a> 左侧索引</h3><figure><img src="'+D+'" alt="image-20220915091024172" tabindex="0" loading="lazy"><figcaption>image-20220915091024172</figcaption></figure><figure><img src="'+I+`" alt="image-20220915091135523" tabindex="0" loading="lazy"><figcaption>image-20220915091135523</figcaption></figure><h3 id="回表" tabindex="-1"><a class="header-anchor" href="#回表" aria-hidden="true">#</a> 回表</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mysql回表指的是在InnoDB的储存引擎下，通过二级索引查找结果后要返回某些列的信息（即要拿到数据），
则需要到主键索引里取出数据。因为二级索引的B+树的叶子节点储存的是主键索引，主键索引的B+树的叶子节点
才储存的是数据
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="索引覆盖" tabindex="-1"><a class="header-anchor" href="#索引覆盖" aria-hidden="true">#</a> 索引覆盖</h3><p>查询主键或联合索引的数据列就能索引覆盖，只要查询一次，因为索引B+树的叶子节点中储存了主键和联合索引。而需要非索引的字段数据，则要查询两次，即查到索引后再回表到主键B+树的叶子节点中获取数据，更加耗时。</p><figure><img src="`+L+'" alt="image-20220915161037677" tabindex="0" loading="lazy"><figcaption>image-20220915161037677</figcaption></figure><h3 id="where优化" tabindex="-1"><a class="header-anchor" href="#where优化" aria-hidden="true">#</a> where优化</h3><h4 id="确定索引" tabindex="-1"><a class="header-anchor" href="#确定索引" aria-hidden="true">#</a> 确定索引</h4><p>抽样检测，索引基数会不精确。可以使用force index强制索引，或者用analyze table优化索引</p><figure><img src="'+Q+'" alt="image-20220915161242961" tabindex="0" loading="lazy"><figcaption>image-20220915161242961</figcaption></figure><h3 id="count优化" tabindex="-1"><a class="header-anchor" href="#count优化" aria-hidden="true">#</a> count优化</h3><p>count(列名)</p><p>需要通过主键索引得到并解析行数据（回忆InnoDB的行记录格式），还需给service层判断是否为空</p><p>count(主键)</p><p>因索引覆盖，不用解析行数据，查询效率高，但仍要判断是否为空</p><p>count(*)</p><p>mysql做了优化，直接返回索引树中数据的个数</p><figure><img src="'+w+'" alt="image-20220915165247697" tabindex="0" loading="lazy"><figcaption>image-20220915165247697</figcaption></figure><figure><img src="'+T+'" alt="image-20220915170230320" tabindex="0" loading="lazy"><figcaption>image-20220915170230320</figcaption></figure><h3 id="group-by-优化" tabindex="-1"><a class="header-anchor" href="#group-by-优化" aria-hidden="true">#</a> group by 优化</h3><figure><img src="'+N+'" alt="image-20220915170748934" tabindex="0" loading="lazy"><figcaption>image-20220915170748934</figcaption></figure><figure><img src="'+O+'" alt="image-20220915171157330" tabindex="0" loading="lazy"><figcaption>image-20220915171157330</figcaption></figure><p>当where和order的索引一致时可以走索引覆盖</p><figure><img src="'+C+'" alt="image-20220915171314698" tabindex="0" loading="lazy"><figcaption>image-20220915171314698</figcaption></figure><h3 id="order-by-rand-优化" tabindex="-1"><a class="header-anchor" href="#order-by-rand-优化" aria-hidden="true">#</a> order by rand() 优化</h3><figure><img src="'+H+'" alt="image-20220915172102929" tabindex="0" loading="lazy"><figcaption>image-20220915172102929</figcaption></figure><p>随机分页查询第一条</p><figure><img src="'+V+'" alt="image-20220915173016946" tabindex="0" loading="lazy"><figcaption>image-20220915173016946</figcaption></figure><figure><img src="'+E+'" alt="image-20220915173058302" tabindex="0" loading="lazy"><figcaption>image-20220915173058302</figcaption></figure><h3 id="索引下推" tabindex="-1"><a class="header-anchor" href="#索引下推" aria-hidden="true">#</a> 索引下推</h3><p>各个索引若明确等于某个值，则先按第一索引查找，</p><p>相同的值再按第二索引查找，还相同再按第三索引查找...</p><p>而当第一索引不明确则无法继续沿着第二索引查找，</p><p>那么只能在第一索引查找的范围内使用第二索引查找了。即索引下推</p><figure><img src="'+G+'" alt="image-20220915192817195" tabindex="0" loading="lazy"><figcaption>image-20220915192817195</figcaption></figure><h3 id="松散索引扫描" tabindex="-1"><a class="header-anchor" href="#松散索引扫描" aria-hidden="true">#</a> 松散索引扫描</h3><p>跳着扫描，如图第一二行数据，因为表是按索引排序的，当film_id前面是2后面是5，那说明store_id为1的行</p><p>肯定没有符合film_id = 3的了，则跳过store_id为1的数据行</p><figure><img src="'+K+'" alt="image-20220915193744543" tabindex="0" loading="lazy"><figcaption>image-20220915193744543</figcaption></figure><h3 id="索引丢失" tabindex="-1"><a class="header-anchor" href="#索引丢失" aria-hidden="true">#</a> 索引丢失</h3><p>若对索引做函数操作，有可能破坏了索引的递增规则，优化器会放弃这个索引</p><figure><img src="'+P+'" alt="image-20220915194711728" tabindex="0" loading="lazy"><figcaption>image-20220915194711728</figcaption></figure><figure><img src="'+R+'" alt="image-20220915195401528" tabindex="0" loading="lazy"><figcaption>image-20220915195401528</figcaption></figure><h3 id="日志体系" tabindex="-1"><a class="header-anchor" href="#日志体系" aria-hidden="true">#</a> 日志体系</h3><figure><img src="'+W+'" alt="image-20220916094954309" tabindex="0" loading="lazy"><figcaption>image-20220916094954309</figcaption></figure><h4 id="binlog" tabindex="-1"><a class="header-anchor" href="#binlog" aria-hidden="true">#</a> binlog</h4><figure><img src="'+X+'" alt="image-20220916095116223" tabindex="0" loading="lazy"><figcaption>image-20220916095116223</figcaption></figure><h4 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log" aria-hidden="true">#</a> undo log</h4><p>根据操作的sql储存能还原的sql</p><figure><img src="'+Z+'" alt="image-20220916095331530" tabindex="0" loading="lazy"><figcaption>image-20220916095331530</figcaption></figure><h4 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log" aria-hidden="true">#</a> redo log</h4><figure><img src="'+j+'" alt="image-20220916095715298" tabindex="0" loading="lazy"><figcaption>image-20220916095715298</figcaption></figure><figure><img src="'+F+'" alt="image-20220916100110801" tabindex="0" loading="lazy"><figcaption>image-20220916100110801</figcaption></figure><h3 id="数据更新流程" tabindex="-1"><a class="header-anchor" href="#数据更新流程" aria-hidden="true">#</a> 数据更新流程</h3><figure><img src="'+J+'" alt="image-20220916101041407" tabindex="0" loading="lazy"><figcaption>image-20220916101041407</figcaption></figure><h4 id="数据安全" tabindex="-1"><a class="header-anchor" href="#数据安全" aria-hidden="true">#</a> 数据安全</h4><figure><img src="'+U+'" alt="image-20220916101941012" tabindex="0" loading="lazy"><figcaption>image-20220916101941012</figcaption></figure><figure><img src="'+Y+'" alt="image-20220916101958540" tabindex="0" loading="lazy"><figcaption>image-20220916101958540</figcaption></figure><figure><img src="'+$+'" alt="image-20220916102324630" tabindex="0" loading="lazy"><figcaption>image-20220916102324630</figcaption></figure><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h3><figure><img src="'+aa+'" alt="image-20220916102524154" tabindex="0" loading="lazy"><figcaption>image-20220916102524154</figcaption></figure><h4 id="元数据锁" tabindex="-1"><a class="header-anchor" href="#元数据锁" aria-hidden="true">#</a> 元数据锁</h4><figure><img src="'+ia+'" alt="image-20220916102736158" tabindex="0" loading="lazy"><figcaption>image-20220916102736158</figcaption></figure><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h3><h4 id="隔离类别" tabindex="-1"><a class="header-anchor" href="#隔离类别" aria-hidden="true">#</a> 隔离类别</h4><figure><img src="'+ea+'" alt="image-20220916103305088" tabindex="0" loading="lazy"><figcaption>image-20220916103305088</figcaption></figure><p>A,B客户端同时开启mysql事务情况下,A更新了数据，但未提交事务</p><ul><li><p>读未提交</p><p>即使A未提交事务,B也能读到数据更新，隔离性差</p></li><li><p>读提交</p><p>A未提交事务，B不能读到数据更新。A提交事务后，B就能看到数据更新。Oracle使用这一级别隔离</p></li><li><p>可重复读</p><p>不管A操作了什么（即使提交事务），B一直读取的是开启事务前的数据。mysql使用这一级别的隔离</p></li><li><p>串行化</p></li></ul><p>​ 对于一行数据，只允许一个事务同时操作，隔离性最强，但性能差</p><h4 id="事务问题" tabindex="-1"><a class="header-anchor" href="#事务问题" aria-hidden="true">#</a> 事务问题</h4><figure><img src="'+ga+'" alt="image-20220916154032602" tabindex="0" loading="lazy"><figcaption>image-20220916154032602</figcaption></figure><figure><img src="'+na+'" alt="image-20220916154504442" tabindex="0" loading="lazy"><figcaption>image-20220916154504442</figcaption></figure><h4 id="读取历史表" tabindex="-1"><a class="header-anchor" href="#读取历史表" aria-hidden="true">#</a> 读取历史表</h4><figure><img src="'+ta+'" alt="image-20221017155237565" tabindex="0" loading="lazy"><figcaption>image-20221017155237565</figcaption></figure><p>根据事务begin开始时间，把数据回退到begin前要版本</p><figure><img src="'+ra+'" alt="img-11111" tabindex="0" loading="lazy"><figcaption>img-11111</figcaption></figure><h4 id="mysql解决幻读" tabindex="-1"><a class="header-anchor" href="#mysql解决幻读" aria-hidden="true">#</a> mysql解决幻读</h4><figure><img src="'+sa+'" alt="image-20220916154833024" tabindex="0" loading="lazy"><figcaption>image-20220916154833024</figcaption></figure><h4 id="间隙锁和next-key-lock的性能问题" tabindex="-1"><a class="header-anchor" href="#间隙锁和next-key-lock的性能问题" aria-hidden="true">#</a> 间隙锁和Next-Key Lock的性能问题</h4><figure><img src="'+da+'" alt="image-20220916155155396" tabindex="0" loading="lazy"><figcaption>image-20220916155155396</figcaption></figure><p>先锁（10，20], 但TxA 是等值查询id=11的，键20不满足条件，不加行锁</p><figure><img src="'+oa+'" alt="image-20220916160647702" tabindex="0" loading="lazy"><figcaption>image-20220916160647702</figcaption></figure><figure><img src="'+ca+'" alt="image-20220916160702011" tabindex="0" loading="lazy"><figcaption>image-20220916160702011</figcaption></figure><figure><img src="'+ma+'" alt="image-20220916160717830" tabindex="0" loading="lazy"><figcaption>image-20220916160717830</figcaption></figure><figure><img src="'+pa+'" alt="image-20220916160737039" tabindex="0" loading="lazy"><figcaption>image-20220916160737039</figcaption></figure><figure><img src="'+fa+'" alt="image-20220916160830012" tabindex="0" loading="lazy"><figcaption>image-20220916160830012</figcaption></figure><h3 id="orm" tabindex="-1"><a class="header-anchor" href="#orm" aria-hidden="true">#</a> ORM</h3><figure><img src="'+la+'" alt="image-20220916161453209" tabindex="0" loading="lazy"><figcaption>image-20220916161453209</figcaption></figure><h3 id="备份" tabindex="-1"><a class="header-anchor" href="#备份" aria-hidden="true">#</a> 备份</h3><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h4><figure><img src="'+ha+'" alt="image-20220918145252061" tabindex="0" loading="lazy"><figcaption>image-20220918145252061</figcaption></figure><figure><img src="'+ua+'" alt="image-20220918145441154" tabindex="0" loading="lazy"><figcaption>image-20220918145441154</figcaption></figure><figure><img src="'+ba+'" alt="image-20220918145415012" tabindex="0" loading="lazy"><figcaption>image-20220918145415012</figcaption></figure><h4 id="mysqldump" tabindex="-1"><a class="header-anchor" href="#mysqldump" aria-hidden="true">#</a> mysqldump</h4><figure><img src="'+_a+'" alt="image-20220918150625608" tabindex="0" loading="lazy"><figcaption>image-20220918150625608</figcaption></figure><h5 id="增量备份" tabindex="-1"><a class="header-anchor" href="#增量备份" aria-hidden="true">#</a> 增量备份</h5><figure><img src="'+xa+'" alt="image-20220918151459201" tabindex="0" loading="lazy"><figcaption>image-20220918151459201</figcaption></figure><figure><img src="'+ya+'" alt="image-20220918151613278" tabindex="0" loading="lazy"><figcaption>image-20220918151613278</figcaption></figure><figure><img src="'+za+'" alt="image-20220918152015858" tabindex="0" loading="lazy"><figcaption>image-20220918152015858</figcaption></figure><figure><img src="'+qa+'" alt="image-20220918152112059" tabindex="0" loading="lazy"><figcaption>image-20220918152112059</figcaption></figure><h4 id="裸备份可行性" tabindex="-1"><a class="header-anchor" href="#裸备份可行性" aria-hidden="true">#</a> 裸备份可行性</h4><figure><img src="'+va+'" alt="image-20220918152559925" tabindex="0" loading="lazy"><figcaption>image-20220918152559925</figcaption></figure><p>在复制期间监听redo.log的变化</p><figure><img src="'+Ba+'" alt="image-20220918153028190" tabindex="0" loading="lazy"><figcaption>image-20220918153028190</figcaption></figure><h3 id="安全防范" tabindex="-1"><a class="header-anchor" href="#安全防范" aria-hidden="true">#</a> 安全防范</h3><figure><img src="'+Ma+'" alt="image-20220918154342270" tabindex="0" loading="lazy"><figcaption>image-20220918154342270</figcaption></figure><figure><img src="'+Aa+'" alt="image-20220918154417988" tabindex="0" loading="lazy"><figcaption>image-20220918154417988</figcaption></figure><figure><img src="'+ka+'" alt="image-20220918154509430" tabindex="0" loading="lazy"><figcaption>image-20220918154509430</figcaption></figure><figure><img src="'+Sa+'" alt="image-20220918154600105" tabindex="0" loading="lazy"><figcaption>image-20220918154600105</figcaption></figure><h3 id="复制" tabindex="-1"><a class="header-anchor" href="#复制" aria-hidden="true">#</a> 复制</h3><h4 id="异步复制" tabindex="-1"><a class="header-anchor" href="#异步复制" aria-hidden="true">#</a> 异步复制</h4><figure><img src="'+Da+'" alt="image-20220919094311828" tabindex="0" loading="lazy"><figcaption>image-20220919094311828</figcaption></figure><figure><img src="'+Ia+'" alt="image-20220919094110389" tabindex="0" loading="lazy"><figcaption>image-20220919094110389</figcaption></figure><h4 id="半同步复制" tabindex="-1"><a class="header-anchor" href="#半同步复制" aria-hidden="true">#</a> 半同步复制</h4><figure><img src="'+La+'" alt="image-20220919094251275" tabindex="0" loading="lazy"><figcaption>image-20220919094251275</figcaption></figure><p>主库长时间没收到备库的接收信号，则自动断开</p><figure><img src="'+Qa+'" alt="image-20220919094449056" tabindex="0" loading="lazy"><figcaption>image-20220919094449056</figcaption></figure><h4 id="组复制" tabindex="-1"><a class="header-anchor" href="#组复制" aria-hidden="true">#</a> 组复制</h4><p>通过共识，多个节点能进行同样的操作</p><figure><img src="'+wa+'" alt="image-20220919094818216" tabindex="0" loading="lazy"><figcaption>image-20220919094818216</figcaption></figure><figure><img src="'+Ta+'" alt="image-20220919094902829" tabindex="0" loading="lazy"><figcaption>image-20220919094902829</figcaption></figure><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例" aria-hidden="true">#</a> 案例</h4><p>课程9-3节</p><h4 id="binlog复制问题" tabindex="-1"><a class="header-anchor" href="#binlog复制问题" aria-hidden="true">#</a> binlog复制问题</h4><ul><li>若使用statement格式，按sql原句发送到备库，让备库再执行一次sql，可能导致结果不一致。</li></ul><p>​ 因为主备库的索引id可能不同，而导致排序不一致，得到结果因此不同。</p><ul><li>使用row格式，则记录的是行数据的变化，然后重构出sql语句让备库执行。</li></ul><h3 id="备库延迟问题" tabindex="-1"><a class="header-anchor" href="#备库延迟问题" aria-hidden="true">#</a> 备库延迟问题</h3><p>根本原因还是主库dump_thead是多线程，同时有很多人操作。而备库的sql_thead为单线程，导致延迟</p><figure><img src="'+Na+'" alt="image-20220920154308489" tabindex="0" loading="lazy"><figcaption>image-20220920154308489</figcaption></figure><figure><img src="'+Oa+'" alt="image-20220920154601071" tabindex="0" loading="lazy"><figcaption>image-20220920154601071</figcaption></figure><h4 id="并行复制" tabindex="-1"><a class="header-anchor" href="#并行复制" aria-hidden="true">#</a> 并行复制</h4><p>为sql_thead的操作分配线程，需要对sql操作分类复制才能够安全运行。</p><p>有按表复制，按行复制，按事务组复制</p><figure><img src="'+Ca+'" alt="image-20220920160338876" tabindex="0" loading="lazy"><figcaption>image-20220920160338876</figcaption></figure><p>5.6采用按库并行复制</p><figure><img src="'+Ha+'" alt="image-20220920155424718" tabindex="0" loading="lazy"><figcaption>image-20220920155424718</figcaption></figure><h4 id="按事务组复制" tabindex="-1"><a class="header-anchor" href="#按事务组复制" aria-hidden="true">#</a> 按事务组复制</h4><p>binlog写入顺序，先写进binlog cache缓存中，再写入内存中的binlog file，最后再写入磁盘的binlog file。</p><p>写入磁盘中的io操作较慢，每个事务都执行写入磁盘操作性能就比较慢。故可以延迟一会，等待多个事务都写入内存的binlog file后，再一齐写入磁盘。省下写入磁盘操作次数。</p><figure><img src="'+Va+'" alt="image-20220920155855406" tabindex="0" loading="lazy"><figcaption>image-20220920155855406</figcaption></figure><p>是在主库中按事务组来提交给备库，备库才能安全的并行执行</p><h3 id="高可用架构" tabindex="-1"><a class="header-anchor" href="#高可用架构" aria-hidden="true">#</a> 高可用架构</h3><p>问题：</p><p>数据冲突：若两个主库都有读写权限，数据更新时就会有冲突。得有一方主库为只读权限</p><p>客户端切换：某个主库挂了，客户端如何检测并切换到另一个主库上</p><p>循环复制：A执行产生的binlog传给B，B执行产生的binlog又传回给A，会一直循环复制。若有GTID，通过binlog的serverID来辨别该binlog来源是谁，从而避免过多复制。</p><figure><img src="'+Ea+'" alt="image-20220920162731385" tabindex="0" loading="lazy"><figcaption>image-20220920162731385</figcaption></figure><h3 id="扩展" tabindex="-1"><a class="header-anchor" href="#扩展" aria-hidden="true">#</a> 扩展</h3><h4 id="分区表" tabindex="-1"><a class="header-anchor" href="#分区表" aria-hidden="true">#</a> 分区表</h4><p>InnoDB将表分成多表，server层仍看作一个表</p><figure><img src="'+Ga+'" alt="image-20220920184535330" tabindex="0" loading="lazy"><figcaption>image-20220920184535330</figcaption></figure><figure><img src="'+Ka+'" alt="image-20220920185003371" tabindex="0" loading="lazy"><figcaption>image-20220920185003371</figcaption></figure><figure><img src="'+Pa+'" alt="image-20220920185023324" tabindex="0" loading="lazy"><figcaption>image-20220920185023324</figcaption></figure><h3 id="分库分表中间件" tabindex="-1"><a class="header-anchor" href="#分库分表中间件" aria-hidden="true">#</a> 分库分表中间件</h3><p>dble ，MyCat</p><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h4><figure><img src="'+Ra+'" alt="image-20220920190138279" tabindex="0" loading="lazy"><figcaption>image-20220920190138279</figcaption></figure><h4 id="dble" tabindex="-1"><a class="header-anchor" href="#dble" aria-hidden="true">#</a> dble</h4><figure><img src="'+Wa+'" alt="image-20220920190623243" tabindex="0" loading="lazy"><figcaption>image-20220920190623243</figcaption></figure><figure><img src="'+Xa+'" alt="image-20220920191217798" tabindex="0" loading="lazy"><figcaption>image-20220920191217798</figcaption></figure><h5 id="高可靠架构" tabindex="-1"><a class="header-anchor" href="#高可靠架构" aria-hidden="true">#</a> 高可靠架构</h5><p>为每个分库作个备库（复制 ）</p><h5 id="分库后sql性能注意" tabindex="-1"><a class="header-anchor" href="#分库后sql性能注意" aria-hidden="true">#</a> 分库后sql性能注意</h5><ul><li><p>插入语句必须带有拆分字段，就不必遍历所有分库了</p></li><li><p>拆分字段尽量等值</p></li><li><figure><img src="'+Za+'" alt="image-20220922092425354" tabindex="0" loading="lazy"><figcaption>image-20220922092425354</figcaption></figure></li><li><figure><img src="'+ja+'" alt="image-20220922092450776" tabindex="0" loading="lazy"><figcaption>image-20220922092450776</figcaption></figure></li><li><figure><img src="'+Fa+'" alt="image-20220922092619978" tabindex="0" loading="lazy"><figcaption>image-20220922092619978</figcaption></figure></li></ul><h3 id="切换" tabindex="-1"><a class="header-anchor" href="#切换" aria-hidden="true">#</a> 切换</h3><h4 id="业务如何连接到备库" tabindex="-1"><a class="header-anchor" href="#业务如何连接到备库" aria-hidden="true">#</a> 业务如何连接到备库</h4><ul><li>客户端切换连接地址</li><li>多开个服务器，把DNS域名映射的ip替换</li><li>使用keepalived监听，vip漂移</li><li>使用代理</li></ul><figure><img src="'+Ja+'" alt="image-20220922134825279" tabindex="0" loading="lazy"><figcaption>image-20220922134825279</figcaption></figure><figure><img src="'+Ua+'" alt="image-20220922134859366" tabindex="0" loading="lazy"><figcaption>image-20220922134859366</figcaption></figure><figure><img src="'+Ya+'" alt="image-20220922135020072" tabindex="0" loading="lazy"><figcaption>image-20220922135020072</figcaption></figure><figure><img src="'+$a+'" alt="image-20220922135104975" tabindex="0" loading="lazy"><figcaption>image-20220922135104975</figcaption></figure><figure><img src="'+ai+'" alt="image-20220922135209835" tabindex="0" loading="lazy"><figcaption>image-20220922135209835</figcaption></figure><h4 id="自主切换-mha" tabindex="-1"><a class="header-anchor" href="#自主切换-mha" aria-hidden="true">#</a> 自主切换 MHA</h4><ol><li>从宕机的Master登陆数据库将未发送的binlog发给备库</li><li>等待备库执行中继日志，使备库恢复到主库水平</li><li>挑选备库切换为主库（一次性）</li></ol><figure><img src="'+ii+'" alt="image-20220922140052080" tabindex="0" loading="lazy"><figcaption>image-20220922140052080</figcaption></figure><h3 id="三高mysql集群" tabindex="-1"><a class="header-anchor" href="#三高mysql集群" aria-hidden="true">#</a> 三高MySQL集群</h3><p>Zookeeper存dble的配置，使单点dble实现分布式，每个dble都拉取得到相同配置，便可使用</p><p>Haproxy负载均衡器，将流量负载均衡到各个dble节点</p><p>主库开读写权限，备库开只读权限</p><figure><img src="'+ei+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="mysql8-0" tabindex="-1"><a class="header-anchor" href="#mysql8-0" aria-hidden="true">#</a> MySQL8.0</h3><h4 id="窗口函数" tabindex="-1"><a class="header-anchor" href="#窗口函数" aria-hidden="true">#</a> 窗口函数</h4><p>相当于 group by ，可以对内容排序之类，然后展开里边内容</p><figure><img src="'+gi+'" alt="image-20220922153937033" tabindex="0" loading="lazy"><figcaption>image-20220922153937033</figcaption></figure><h4 id="隐藏索引" tabindex="-1"><a class="header-anchor" href="#隐藏索引" aria-hidden="true">#</a> 隐藏索引</h4><figure><img src="'+ni+'" alt="image-20220922154128592" tabindex="0" loading="lazy"><figcaption>image-20220922154128592</figcaption></figure><h4 id="降序索引" tabindex="-1"><a class="header-anchor" href="#降序索引" aria-hidden="true">#</a> 降序索引</h4><figure><img src="'+ti+'" alt="image-20220922154418110" tabindex="0" loading="lazy"><figcaption>image-20220922154418110</figcaption></figure><h4 id="临时表" tabindex="-1"><a class="header-anchor" href="#临时表" aria-hidden="true">#</a> 临时表</h4><figure><img src="'+ri+'" alt="image-20220922154613620" tabindex="0" loading="lazy"><figcaption>image-20220922154613620</figcaption></figure><h3 id="数据库分类" tabindex="-1"><a class="header-anchor" href="#数据库分类" aria-hidden="true">#</a> 数据库分类</h3><h4 id="按用途分类" tabindex="-1"><a class="header-anchor" href="#按用途分类" aria-hidden="true">#</a> 按用途分类</h4><figure><img src="'+si+'" alt="image-20220922155522694" tabindex="0" loading="lazy"><figcaption>image-20220922155522694</figcaption></figure><figure><img src="'+di+'" alt="image-20220922155657065" tabindex="0" loading="lazy"><figcaption>image-20220922155657065</figcaption></figure><h4 id="按存储形式分类" tabindex="-1"><a class="header-anchor" href="#按存储形式分类" aria-hidden="true">#</a> 按存储形式分类</h4><p>行存，列存，key-value</p><h3 id="postgresql" tabindex="-1"><a class="header-anchor" href="#postgresql" aria-hidden="true">#</a> PostgreSQL</h3><figure><img src="'+oi+'" alt="image-20220922165900083" tabindex="0" loading="lazy"><figcaption>image-20220922165900083</figcaption></figure><h3 id="mysql改造" tabindex="-1"><a class="header-anchor" href="#mysql改造" aria-hidden="true">#</a> MySQL改造</h3><figure><img src="'+ci+'" alt="image-20220922170525882" tabindex="0" loading="lazy"><figcaption>image-20220922170525882</figcaption></figure><h3 id="oceanbase" tabindex="-1"><a class="header-anchor" href="#oceanbase" aria-hidden="true">#</a> OceanBase</h3><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能" aria-hidden="true">#</a> 功能</h2><h3 id="优化设计" tabindex="-1"><a class="header-anchor" href="#优化设计" aria-hidden="true">#</a> 优化设计</h3><figure><img src="'+mi+'" alt="image-20220915101546709" tabindex="0" loading="lazy"><figcaption>image-20220915101546709</figcaption></figure><figure><img src="'+pi+'" alt="image-20220915101657248" tabindex="0" loading="lazy"><figcaption>image-20220915101657248</figcaption></figure><figure><img src="'+fi+'" alt="image-20220915101754709" tabindex="0" loading="lazy"><figcaption>image-20220915101754709</figcaption></figure><h2 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h2><h3 id="为何mysql不使用查询缓存" tabindex="-1"><a class="header-anchor" href="#为何mysql不使用查询缓存" aria-hidden="true">#</a> 为何mysql不使用查询缓存</h3><p>说明：每次执行查询语句便将结果缓存，下次执行相同查询时不必重复查询</p><p>目的：节省时间，提高性能</p><p>缺点：缓存数据大，若数据发生更改，则与该表相关的所有缓存都失效，得全部清空。</p><p>​ 在高并发的表中反而cpu消耗更多，发挥空间小</p><figure><img src="'+li+'" alt="image-20220913162444897" tabindex="0" loading="lazy"><figcaption>image-20220913162444897</figcaption></figure>',273),bi=[ui];function _i(xi,yi){return i(),e("div",null,bi)}const qi=a(hi,[["render",_i],["__file","MySQL 进阶.html.vue"]]);export{qi as default};
